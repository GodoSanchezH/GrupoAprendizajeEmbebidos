
holamundo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080022dc  080022dc  000122dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002354  08002354  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002354  08002354  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002354  08002354  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002354  08002354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002358  08002358  00012358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800235c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  080023cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080023cc  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003204  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001052  00000000  00000000  0002329d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000458  00000000  00000000  000242f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  00024748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016be8  00000000  00000000  00024af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000566f  00000000  00000000  0003b6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008008c  00000000  00000000  00040d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0ddb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001308  00000000  00000000  000c0e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080022c4 	.word	0x080022c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080022c4 	.word	0x080022c4

0800014c <LCD_STM32_DataBus>:
#include "LCD.h"


Ubicacion Cursor;

void LCD_STM32_DataBus(uint8_t a){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	//0000 0001
	if(a & 0x01){ D4_ON;}
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f003 0301 	and.w	r3, r3, #1
 800015c:	2b00      	cmp	r3, #0
 800015e:	d005      	beq.n	800016c <LCD_STM32_DataBus+0x20>
 8000160:	2201      	movs	r2, #1
 8000162:	2110      	movs	r1, #16
 8000164:	4820      	ldr	r0, [pc, #128]	; (80001e8 <LCD_STM32_DataBus+0x9c>)
 8000166:	f000 ffe7 	bl	8001138 <HAL_GPIO_WritePin>
 800016a:	e004      	b.n	8000176 <LCD_STM32_DataBus+0x2a>
    else{ D4_OFF;}
 800016c:	2200      	movs	r2, #0
 800016e:	2110      	movs	r1, #16
 8000170:	481d      	ldr	r0, [pc, #116]	; (80001e8 <LCD_STM32_DataBus+0x9c>)
 8000172:	f000 ffe1 	bl	8001138 <HAL_GPIO_WritePin>
    //0000 0010
    if(a & 0x02) {D5_ON;}
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	f003 0302 	and.w	r3, r3, #2
 800017c:	2b00      	cmp	r3, #0
 800017e:	d005      	beq.n	800018c <LCD_STM32_DataBus+0x40>
 8000180:	2201      	movs	r2, #1
 8000182:	2108      	movs	r1, #8
 8000184:	4818      	ldr	r0, [pc, #96]	; (80001e8 <LCD_STM32_DataBus+0x9c>)
 8000186:	f000 ffd7 	bl	8001138 <HAL_GPIO_WritePin>
 800018a:	e004      	b.n	8000196 <LCD_STM32_DataBus+0x4a>
    else{D5_OFF;}
 800018c:	2200      	movs	r2, #0
 800018e:	2108      	movs	r1, #8
 8000190:	4815      	ldr	r0, [pc, #84]	; (80001e8 <LCD_STM32_DataBus+0x9c>)
 8000192:	f000 ffd1 	bl	8001138 <HAL_GPIO_WritePin>
    //0000 0100
    if(a & 0x04){D6_ON;}
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	2b00      	cmp	r3, #0
 800019e:	d006      	beq.n	80001ae <LCD_STM32_DataBus+0x62>
 80001a0:	2201      	movs	r2, #1
 80001a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001a6:	4811      	ldr	r0, [pc, #68]	; (80001ec <LCD_STM32_DataBus+0xa0>)
 80001a8:	f000 ffc6 	bl	8001138 <HAL_GPIO_WritePin>
 80001ac:	e005      	b.n	80001ba <LCD_STM32_DataBus+0x6e>
    else{D6_OFF;}
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001b4:	480d      	ldr	r0, [pc, #52]	; (80001ec <LCD_STM32_DataBus+0xa0>)
 80001b6:	f000 ffbf 	bl	8001138 <HAL_GPIO_WritePin>
     //0000 1000
    if(a & 0x08){D7_ON;}
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	f003 0308 	and.w	r3, r3, #8
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d006      	beq.n	80001d2 <LCD_STM32_DataBus+0x86>
 80001c4:	2201      	movs	r2, #1
 80001c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ca:	4808      	ldr	r0, [pc, #32]	; (80001ec <LCD_STM32_DataBus+0xa0>)
 80001cc:	f000 ffb4 	bl	8001138 <HAL_GPIO_WritePin>
    else{D7_OFF;}

}
 80001d0:	e005      	b.n	80001de <LCD_STM32_DataBus+0x92>
    else{D7_OFF;}
 80001d2:	2200      	movs	r2, #0
 80001d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <LCD_STM32_DataBus+0xa0>)
 80001da:	f000 ffad 	bl	8001138 <HAL_GPIO_WritePin>
}
 80001de:	bf00      	nop
 80001e0:	3708      	adds	r7, #8
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40010c00 	.word	0x40010c00
 80001ec:	40010800 	.word	0x40010800

080001f0 <LCD_STM32_Cmd>:
void LCD_STM32_Cmd(uint8_t a){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
    E_OFF;
 80001fa:	2200      	movs	r2, #0
 80001fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000200:	480c      	ldr	r0, [pc, #48]	; (8000234 <LCD_STM32_Cmd+0x44>)
 8000202:	f000 ff99 	bl	8001138 <HAL_GPIO_WritePin>
    E_ON;
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800020c:	4809      	ldr	r0, [pc, #36]	; (8000234 <LCD_STM32_Cmd+0x44>)
 800020e:	f000 ff93 	bl	8001138 <HAL_GPIO_WritePin>
    LCD_STM32_DataBus(a);    //Datos
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	4618      	mov	r0, r3
 8000216:	f7ff ff99 	bl	800014c <LCD_STM32_DataBus>
    HAL_Delay(2);
 800021a:	2002      	movs	r0, #2
 800021c:	f000 fd00 	bl	8000c20 <HAL_Delay>
    E_OFF;
 8000220:	2200      	movs	r2, #0
 8000222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000226:	4803      	ldr	r0, [pc, #12]	; (8000234 <LCD_STM32_Cmd+0x44>)
 8000228:	f000 ff86 	bl	8001138 <HAL_GPIO_WritePin>
}
 800022c:	bf00      	nop
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40010c00 	.word	0x40010c00

08000238 <LCD_STM32_Init>:
void LCD_STM32_Init(void){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0


    LCD_STM32_Cmd(0x03);
 800023c:	2003      	movs	r0, #3
 800023e:	f7ff ffd7 	bl	80001f0 <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x03);
 8000242:	2003      	movs	r0, #3
 8000244:	f7ff ffd4 	bl	80001f0 <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x03);
 8000248:	2003      	movs	r0, #3
 800024a:	f7ff ffd1 	bl	80001f0 <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x02);
 800024e:	2002      	movs	r0, #2
 8000250:	f7ff ffce 	bl	80001f0 <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x02);
 8000254:	2002      	movs	r0, #2
 8000256:	f7ff ffcb 	bl	80001f0 <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x08);
 800025a:	2008      	movs	r0, #8
 800025c:	f7ff ffc8 	bl	80001f0 <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x00);
 8000260:	2000      	movs	r0, #0
 8000262:	f7ff ffc5 	bl	80001f0 <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x08);
 8000266:	2008      	movs	r0, #8
 8000268:	f7ff ffc2 	bl	80001f0 <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x00);
 800026c:	2000      	movs	r0, #0
 800026e:	f7ff ffbf 	bl	80001f0 <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x01);
 8000272:	2001      	movs	r0, #1
 8000274:	f7ff ffbc 	bl	80001f0 <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x00);
 8000278:	2000      	movs	r0, #0
 800027a:	f7ff ffb9 	bl	80001f0 <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x0C); //Inicializado
 800027e:	200c      	movs	r0, #12
 8000280:	f7ff ffb6 	bl	80001f0 <LCD_STM32_Cmd>

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}

08000288 <LCD_STM32_SetCursor>:
void LCD_STM32_SetCursor(uint8_t x, Ubicacion y){
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	460a      	mov	r2, r1
 8000292:	71fb      	strb	r3, [r7, #7]
 8000294:	4613      	mov	r3, r2
 8000296:	71bb      	strb	r3, [r7, #6]
    RS_OFF;
 8000298:	2200      	movs	r2, #0
 800029a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800029e:	482b      	ldr	r0, [pc, #172]	; (800034c <LCD_STM32_SetCursor+0xc4>)
 80002a0:	f000 ff4a 	bl	8001138 <HAL_GPIO_WritePin>
    uint8_t m,n;
     switch(y){
 80002a4:	79bb      	ldrb	r3, [r7, #6]
 80002a6:	3b01      	subs	r3, #1
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d84b      	bhi.n	8000344 <LCD_STM32_SetCursor+0xbc>
 80002ac:	a201      	add	r2, pc, #4	; (adr r2, 80002b4 <LCD_STM32_SetCursor+0x2c>)
 80002ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b2:	bf00      	nop
 80002b4:	080002c5 	.word	0x080002c5
 80002b8:	080002e5 	.word	0x080002e5
 80002bc:	08000305 	.word	0x08000305
 80002c0:	08000325 	.word	0x08000325
        case FILA1:
            m=0x80+x;
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	3b80      	subs	r3, #128	; 0x80
 80002c8:	73fb      	strb	r3, [r7, #15]
            n=(0x80+x)>>4;//Corrimiento de bits
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	3380      	adds	r3, #128	; 0x80
 80002ce:	111b      	asrs	r3, r3, #4
 80002d0:	73bb      	strb	r3, [r7, #14]
            LCD_STM32_Cmd(n);
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ff8b 	bl	80001f0 <LCD_STM32_Cmd>
            LCD_STM32_Cmd(m);
 80002da:	7bfb      	ldrb	r3, [r7, #15]
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ff87 	bl	80001f0 <LCD_STM32_Cmd>
            break;
 80002e2:	e02f      	b.n	8000344 <LCD_STM32_SetCursor+0xbc>
        case FILA2:
            m=0xC0+x;
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	3b40      	subs	r3, #64	; 0x40
 80002e8:	73fb      	strb	r3, [r7, #15]
            n=(0xC0+x)>>4;//Corrimiento de bits
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	33c0      	adds	r3, #192	; 0xc0
 80002ee:	111b      	asrs	r3, r3, #4
 80002f0:	73bb      	strb	r3, [r7, #14]
            LCD_STM32_Cmd(n);
 80002f2:	7bbb      	ldrb	r3, [r7, #14]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ff7b 	bl	80001f0 <LCD_STM32_Cmd>
            LCD_STM32_Cmd(m);
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ff77 	bl	80001f0 <LCD_STM32_Cmd>
            break;
 8000302:	e01f      	b.n	8000344 <LCD_STM32_SetCursor+0xbc>
        case FILA3:
            m=0x94+x;
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	3b6c      	subs	r3, #108	; 0x6c
 8000308:	73fb      	strb	r3, [r7, #15]
            n=(0x94+x)>>4;//Corrimiento de bits
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	3394      	adds	r3, #148	; 0x94
 800030e:	111b      	asrs	r3, r3, #4
 8000310:	73bb      	strb	r3, [r7, #14]
            LCD_STM32_Cmd(n);
 8000312:	7bbb      	ldrb	r3, [r7, #14]
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ff6b 	bl	80001f0 <LCD_STM32_Cmd>
            LCD_STM32_Cmd(m);
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff67 	bl	80001f0 <LCD_STM32_Cmd>
            break;
 8000322:	e00f      	b.n	8000344 <LCD_STM32_SetCursor+0xbc>
        case FILA4:
            m=0xD4+x;
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	3b2c      	subs	r3, #44	; 0x2c
 8000328:	73fb      	strb	r3, [r7, #15]
            n=(0xD4+x)>>4;//Corrimiento de bits
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	33d4      	adds	r3, #212	; 0xd4
 800032e:	111b      	asrs	r3, r3, #4
 8000330:	73bb      	strb	r3, [r7, #14]
            LCD_STM32_Cmd(n);
 8000332:	7bbb      	ldrb	r3, [r7, #14]
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ff5b 	bl	80001f0 <LCD_STM32_Cmd>
            LCD_STM32_Cmd(m);
 800033a:	7bfb      	ldrb	r3, [r7, #15]
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff57 	bl	80001f0 <LCD_STM32_Cmd>
           break;
 8000342:	bf00      	nop
    }
}
 8000344:	bf00      	nop
 8000346:	3710      	adds	r7, #16
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40010c00 	.word	0x40010c00

08000350 <LCD_STM32_Print_Char>:
void LCD_STM32_Print_Char(char a){
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
    uint8_t m,n;
    m=a>>4;
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	091b      	lsrs	r3, r3, #4
 800035e:	73fb      	strb	r3, [r7, #15]
    n=a;
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	73bb      	strb	r3, [r7, #14]
    RS_ON;
 8000364:	2201      	movs	r2, #1
 8000366:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800036a:	4807      	ldr	r0, [pc, #28]	; (8000388 <LCD_STM32_Print_Char+0x38>)
 800036c:	f000 fee4 	bl	8001138 <HAL_GPIO_WritePin>
    LCD_STM32_Cmd(m);
 8000370:	7bfb      	ldrb	r3, [r7, #15]
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ff3c 	bl	80001f0 <LCD_STM32_Cmd>
    LCD_STM32_Cmd(n);
 8000378:	7bbb      	ldrb	r3, [r7, #14]
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff38 	bl	80001f0 <LCD_STM32_Cmd>
}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010c00 	.word	0x40010c00

0800038c <LCD_STM32_Print_String>:
void LCD_STM32_Print_String(char *a){
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
    char *ptr;
    ptr = a;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60fb      	str	r3, [r7, #12]
    while (*ptr)
 8000398:	e006      	b.n	80003a8 <LCD_STM32_Print_String+0x1c>
    	LCD_STM32_Print_Char(*ptr++);
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	1c5a      	adds	r2, r3, #1
 800039e:	60fa      	str	r2, [r7, #12]
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ffd4 	bl	8000350 <LCD_STM32_Print_Char>
    while (*ptr)
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d1f4      	bne.n	800039a <LCD_STM32_Print_String+0xe>
}
 80003b0:	bf00      	nop
 80003b2:	bf00      	nop
 80003b4:	3710      	adds	r7, #16
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <LCD_STM32_New_Char>:
void LCD_STM32_Home(void){
	RS_OFF;
    LCD_STM32_Cmd(0x00);
    LCD_STM32_Cmd(0x02);
}
void LCD_STM32_New_Char(uint8_t a,uint8_t b,uint8_t c,uint8_t d,uint8_t e,uint8_t f,uint8_t g,uint8_t h,uint8_t i){
 80003bc:	b590      	push	{r4, r7, lr}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4604      	mov	r4, r0
 80003c4:	4608      	mov	r0, r1
 80003c6:	4611      	mov	r1, r2
 80003c8:	461a      	mov	r2, r3
 80003ca:	4623      	mov	r3, r4
 80003cc:	71fb      	strb	r3, [r7, #7]
 80003ce:	4603      	mov	r3, r0
 80003d0:	71bb      	strb	r3, [r7, #6]
 80003d2:	460b      	mov	r3, r1
 80003d4:	717b      	strb	r3, [r7, #5]
 80003d6:	4613      	mov	r3, r2
 80003d8:	713b      	strb	r3, [r7, #4]
    uint8_t m,n;
    switch(a){
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	f000 8132 	beq.w	8000646 <LCD_STM32_New_Char+0x28a>
 80003e2:	2b03      	cmp	r3, #3
 80003e4:	f300 81bd 	bgt.w	8000762 <LCD_STM32_New_Char+0x3a6>
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d003      	beq.n	80003f4 <LCD_STM32_New_Char+0x38>
 80003ec:	2b02      	cmp	r3, #2
 80003ee:	f000 808f 	beq.w	8000510 <LCD_STM32_New_Char+0x154>
        LCD_STM32_Cmd(0x00);
        LCD_STM32_Cmd(0x01);
        HAL_Delay(100);
        break;
    }
}
 80003f2:	e1b6      	b.n	8000762 <LCD_STM32_New_Char+0x3a6>
        	LCD_STM32_Cmd(0x04);
 80003f4:	2004      	movs	r0, #4
 80003f6:	f7ff fefb 	bl	80001f0 <LCD_STM32_Cmd>
        	LCD_STM32_Cmd(0x00);
 80003fa:	2000      	movs	r0, #0
 80003fc:	f7ff fef8 	bl	80001f0 <LCD_STM32_Cmd>
        RS_ON;
 8000400:	2201      	movs	r2, #1
 8000402:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000406:	48d9      	ldr	r0, [pc, #868]	; (800076c <LCD_STM32_New_Char+0x3b0>)
 8000408:	f000 fe96 	bl	8001138 <HAL_GPIO_WritePin>
        m=b>>4;
 800040c:	79bb      	ldrb	r3, [r7, #6]
 800040e:	091b      	lsrs	r3, r3, #4
 8000410:	73fb      	strb	r3, [r7, #15]
        n=b;
 8000412:	79bb      	ldrb	r3, [r7, #6]
 8000414:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 8000416:	7bfb      	ldrb	r3, [r7, #15]
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff fee9 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 800041e:	7bbb      	ldrb	r3, [r7, #14]
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff fee5 	bl	80001f0 <LCD_STM32_Cmd>
        m=c>>4;
 8000426:	797b      	ldrb	r3, [r7, #5]
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	73fb      	strb	r3, [r7, #15]
        n=c;
 800042c:	797b      	ldrb	r3, [r7, #5]
 800042e:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff fedc 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 8000438:	7bbb      	ldrb	r3, [r7, #14]
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fed8 	bl	80001f0 <LCD_STM32_Cmd>
        m=d>>4;
 8000440:	793b      	ldrb	r3, [r7, #4]
 8000442:	091b      	lsrs	r3, r3, #4
 8000444:	73fb      	strb	r3, [r7, #15]
        n=d;
 8000446:	793b      	ldrb	r3, [r7, #4]
 8000448:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 800044a:	7bfb      	ldrb	r3, [r7, #15]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff fecf 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 8000452:	7bbb      	ldrb	r3, [r7, #14]
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff fecb 	bl	80001f0 <LCD_STM32_Cmd>
        m=e>>4;
 800045a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800045e:	091b      	lsrs	r3, r3, #4
 8000460:	73fb      	strb	r3, [r7, #15]
        n=e;
 8000462:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000466:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff fec0 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 8000470:	7bbb      	ldrb	r3, [r7, #14]
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff febc 	bl	80001f0 <LCD_STM32_Cmd>
        m=f>>4;
 8000478:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800047c:	091b      	lsrs	r3, r3, #4
 800047e:	73fb      	strb	r3, [r7, #15]
        n=f;
 8000480:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000484:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 8000486:	7bfb      	ldrb	r3, [r7, #15]
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff feb1 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 800048e:	7bbb      	ldrb	r3, [r7, #14]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fead 	bl	80001f0 <LCD_STM32_Cmd>
        m=g>>4;
 8000496:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800049a:	091b      	lsrs	r3, r3, #4
 800049c:	73fb      	strb	r3, [r7, #15]
        n=g;
 800049e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80004a2:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff fea2 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 80004ac:	7bbb      	ldrb	r3, [r7, #14]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff fe9e 	bl	80001f0 <LCD_STM32_Cmd>
        m=h>>4;
 80004b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80004b8:	091b      	lsrs	r3, r3, #4
 80004ba:	73fb      	strb	r3, [r7, #15]
        n=h;
 80004bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80004c0:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe93 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff fe8f 	bl	80001f0 <LCD_STM32_Cmd>
        m=i>>4;
 80004d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80004d6:	091b      	lsrs	r3, r3, #4
 80004d8:	73fb      	strb	r3, [r7, #15]
        n=i;
 80004da:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80004de:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff fe84 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 80004e8:	7bbb      	ldrb	r3, [r7, #14]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fe80 	bl	80001f0 <LCD_STM32_Cmd>
        RS_OFF;
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004f6:	489d      	ldr	r0, [pc, #628]	; (800076c <LCD_STM32_New_Char+0x3b0>)
 80004f8:	f000 fe1e 	bl	8001138 <HAL_GPIO_WritePin>
        LCD_STM32_Cmd(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fe77 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(0x01);
 8000502:	2001      	movs	r0, #1
 8000504:	f7ff fe74 	bl	80001f0 <LCD_STM32_Cmd>
        HAL_Delay(100);
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f000 fb89 	bl	8000c20 <HAL_Delay>
        break;
 800050e:	e128      	b.n	8000762 <LCD_STM32_New_Char+0x3a6>
        	LCD_STM32_Cmd(0x04);
 8000510:	2004      	movs	r0, #4
 8000512:	f7ff fe6d 	bl	80001f0 <LCD_STM32_Cmd>
        	LCD_STM32_Cmd(0x08);
 8000516:	2008      	movs	r0, #8
 8000518:	f7ff fe6a 	bl	80001f0 <LCD_STM32_Cmd>
        	RS_ON;
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000522:	4892      	ldr	r0, [pc, #584]	; (800076c <LCD_STM32_New_Char+0x3b0>)
 8000524:	f000 fe08 	bl	8001138 <HAL_GPIO_WritePin>
        m=b>>4;
 8000528:	79bb      	ldrb	r3, [r7, #6]
 800052a:	091b      	lsrs	r3, r3, #4
 800052c:	73fb      	strb	r3, [r7, #15]
        n=b;
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fe5b 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff fe57 	bl	80001f0 <LCD_STM32_Cmd>
        m=c>>4;
 8000542:	797b      	ldrb	r3, [r7, #5]
 8000544:	091b      	lsrs	r3, r3, #4
 8000546:	73fb      	strb	r3, [r7, #15]
        n=c;
 8000548:	797b      	ldrb	r3, [r7, #5]
 800054a:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff fe4e 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 8000554:	7bbb      	ldrb	r3, [r7, #14]
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fe4a 	bl	80001f0 <LCD_STM32_Cmd>
        m=c>>4;
 800055c:	797b      	ldrb	r3, [r7, #5]
 800055e:	091b      	lsrs	r3, r3, #4
 8000560:	73fb      	strb	r3, [r7, #15]
        n=c;
 8000562:	797b      	ldrb	r3, [r7, #5]
 8000564:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff fe41 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 800056e:	7bbb      	ldrb	r3, [r7, #14]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fe3d 	bl	80001f0 <LCD_STM32_Cmd>
        m=d>>4;
 8000576:	793b      	ldrb	r3, [r7, #4]
 8000578:	091b      	lsrs	r3, r3, #4
 800057a:	73fb      	strb	r3, [r7, #15]
        n=d;
 800057c:	793b      	ldrb	r3, [r7, #4]
 800057e:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fe34 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 8000588:	7bbb      	ldrb	r3, [r7, #14]
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff fe30 	bl	80001f0 <LCD_STM32_Cmd>
        m=e>>4;
 8000590:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000594:	091b      	lsrs	r3, r3, #4
 8000596:	73fb      	strb	r3, [r7, #15]
        n=e;
 8000598:	f897 3020 	ldrb.w	r3, [r7, #32]
 800059c:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fe25 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fe21 	bl	80001f0 <LCD_STM32_Cmd>
        m=f>>4;
 80005ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005b2:	091b      	lsrs	r3, r3, #4
 80005b4:	73fb      	strb	r3, [r7, #15]
        n=f;
 80005b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005ba:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff fe16 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 80005c4:	7bbb      	ldrb	r3, [r7, #14]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe12 	bl	80001f0 <LCD_STM32_Cmd>
        m=g>>4;
 80005cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005d0:	091b      	lsrs	r3, r3, #4
 80005d2:	73fb      	strb	r3, [r7, #15]
        n=g;
 80005d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005d8:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fe07 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 80005e2:	7bbb      	ldrb	r3, [r7, #14]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe03 	bl	80001f0 <LCD_STM32_Cmd>
        m=h>>4;
 80005ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80005ee:	091b      	lsrs	r3, r3, #4
 80005f0:	73fb      	strb	r3, [r7, #15]
        n=h;
 80005f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80005f6:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fdf8 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fdf4 	bl	80001f0 <LCD_STM32_Cmd>
        m=i>>4;
 8000608:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	73fb      	strb	r3, [r7, #15]
        n=i;
 8000610:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000614:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fde9 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 800061e:	7bbb      	ldrb	r3, [r7, #14]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fde5 	bl	80001f0 <LCD_STM32_Cmd>
        RS_OFF;
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062c:	484f      	ldr	r0, [pc, #316]	; (800076c <LCD_STM32_New_Char+0x3b0>)
 800062e:	f000 fd83 	bl	8001138 <HAL_GPIO_WritePin>
        LCD_STM32_Cmd(0x00);
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff fddc 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(0x01);
 8000638:	2001      	movs	r0, #1
 800063a:	f7ff fdd9 	bl	80001f0 <LCD_STM32_Cmd>
        HAL_Delay(100);
 800063e:	2064      	movs	r0, #100	; 0x64
 8000640:	f000 faee 	bl	8000c20 <HAL_Delay>
        break;
 8000644:	e08d      	b.n	8000762 <LCD_STM32_New_Char+0x3a6>
        LCD_STM32_Cmd(0x04);
 8000646:	2004      	movs	r0, #4
 8000648:	f7ff fdd2 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(0xFF);
 800064c:	20ff      	movs	r0, #255	; 0xff
 800064e:	f7ff fdcf 	bl	80001f0 <LCD_STM32_Cmd>
        RS_ON;
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000658:	4844      	ldr	r0, [pc, #272]	; (800076c <LCD_STM32_New_Char+0x3b0>)
 800065a:	f000 fd6d 	bl	8001138 <HAL_GPIO_WritePin>
        m=b>>4;
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	73fb      	strb	r3, [r7, #15]
        n=b;
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fdc0 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 8000670:	7bbb      	ldrb	r3, [r7, #14]
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fdbc 	bl	80001f0 <LCD_STM32_Cmd>
        m=c>>4;
 8000678:	797b      	ldrb	r3, [r7, #5]
 800067a:	091b      	lsrs	r3, r3, #4
 800067c:	73fb      	strb	r3, [r7, #15]
        n=c;
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fdb3 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff fdaf 	bl	80001f0 <LCD_STM32_Cmd>
        m=d>>4;
 8000692:	793b      	ldrb	r3, [r7, #4]
 8000694:	091b      	lsrs	r3, r3, #4
 8000696:	73fb      	strb	r3, [r7, #15]
        n=d;
 8000698:	793b      	ldrb	r3, [r7, #4]
 800069a:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fda6 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 80006a4:	7bbb      	ldrb	r3, [r7, #14]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff fda2 	bl	80001f0 <LCD_STM32_Cmd>
        m=e>>4;
 80006ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006b0:	091b      	lsrs	r3, r3, #4
 80006b2:	73fb      	strb	r3, [r7, #15]
        n=e;
 80006b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006b8:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fd97 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 80006c2:	7bbb      	ldrb	r3, [r7, #14]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fd93 	bl	80001f0 <LCD_STM32_Cmd>
        m=f>>4;
 80006ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006ce:	091b      	lsrs	r3, r3, #4
 80006d0:	73fb      	strb	r3, [r7, #15]
        n=f;
 80006d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006d6:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fd88 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 80006e0:	7bbb      	ldrb	r3, [r7, #14]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fd84 	bl	80001f0 <LCD_STM32_Cmd>
        m=g>>4;
 80006e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006ec:	091b      	lsrs	r3, r3, #4
 80006ee:	73fb      	strb	r3, [r7, #15]
        n=g;
 80006f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006f4:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fd79 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 80006fe:	7bbb      	ldrb	r3, [r7, #14]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fd75 	bl	80001f0 <LCD_STM32_Cmd>
        m=h>>4;
 8000706:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800070a:	091b      	lsrs	r3, r3, #4
 800070c:	73fb      	strb	r3, [r7, #15]
        n=h;
 800070e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000712:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff fd6a 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 800071c:	7bbb      	ldrb	r3, [r7, #14]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fd66 	bl	80001f0 <LCD_STM32_Cmd>
        m=i>>4;
 8000724:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000728:	091b      	lsrs	r3, r3, #4
 800072a:	73fb      	strb	r3, [r7, #15]
        n=i;
 800072c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000730:	73bb      	strb	r3, [r7, #14]
        LCD_STM32_Cmd(m);
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fd5b 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(n);
 800073a:	7bbb      	ldrb	r3, [r7, #14]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fd57 	bl	80001f0 <LCD_STM32_Cmd>
        RS_OFF;
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000748:	4808      	ldr	r0, [pc, #32]	; (800076c <LCD_STM32_New_Char+0x3b0>)
 800074a:	f000 fcf5 	bl	8001138 <HAL_GPIO_WritePin>
        LCD_STM32_Cmd(0x00);
 800074e:	2000      	movs	r0, #0
 8000750:	f7ff fd4e 	bl	80001f0 <LCD_STM32_Cmd>
        LCD_STM32_Cmd(0x01);
 8000754:	2001      	movs	r0, #1
 8000756:	f7ff fd4b 	bl	80001f0 <LCD_STM32_Cmd>
        HAL_Delay(100);
 800075a:	2064      	movs	r0, #100	; 0x64
 800075c:	f000 fa60 	bl	8000c20 <HAL_Delay>
        break;
 8000760:	bf00      	nop
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bd90      	pop	{r4, r7, pc}
 800076a:	bf00      	nop
 800076c:	40010c00 	.word	0x40010c00

08000770 <LCD_STM32_Write_New_Char>:

void LCD_STM32_Write_New_Char(uint8_t a){
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	RS_ON;
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000780:	480a      	ldr	r0, [pc, #40]	; (80007ac <LCD_STM32_Write_New_Char+0x3c>)
 8000782:	f000 fcd9 	bl	8001138 <HAL_GPIO_WritePin>
    LCD_STM32_Cmd(0x00);
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff fd32 	bl	80001f0 <LCD_STM32_Cmd>
    LCD_STM32_Cmd(a-1);
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	3b01      	subs	r3, #1
 8000790:	b2db      	uxtb	r3, r3
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fd2c 	bl	80001f0 <LCD_STM32_Cmd>
    RS_OFF;
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079e:	4803      	ldr	r0, [pc, #12]	; (80007ac <LCD_STM32_Write_New_Char+0x3c>)
 80007a0:	f000 fcca 	bl	8001138 <HAL_GPIO_WritePin>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40010c00 	.word	0x40010c00

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b6:	f000 f9d1 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ba:	f000 f857 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007be:	f000 f891 	bl	80008e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD_STM32_Init();
 80007c2:	f7ff fd39 	bl	8000238 <LCD_STM32_Init>
  LCD_STM32_New_Char(1,0x0A,0x1F,0x1F,0x1F,0x0E,0x04,0x00,0x00);
 80007c6:	2300      	movs	r3, #0
 80007c8:	9304      	str	r3, [sp, #16]
 80007ca:	2300      	movs	r3, #0
 80007cc:	9303      	str	r3, [sp, #12]
 80007ce:	2304      	movs	r3, #4
 80007d0:	9302      	str	r3, [sp, #8]
 80007d2:	230e      	movs	r3, #14
 80007d4:	9301      	str	r3, [sp, #4]
 80007d6:	231f      	movs	r3, #31
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	231f      	movs	r3, #31
 80007dc:	221f      	movs	r2, #31
 80007de:	210a      	movs	r1, #10
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff fdeb 	bl	80003bc <LCD_STM32_New_Char>
  LCD_STM32_SetCursor(0, FILA1);
 80007e6:	2101      	movs	r1, #1
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff fd4d 	bl	8000288 <LCD_STM32_SetCursor>
  LCD_STM32_Print_String(" Curso Cas UNI");
 80007ee:	4819      	ldr	r0, [pc, #100]	; (8000854 <main+0xa4>)
 80007f0:	f7ff fdcc 	bl	800038c <LCD_STM32_Print_String>
  LCD_STM32_SetCursor(0, FILA2);
 80007f4:	2102      	movs	r1, #2
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff fd46 	bl	8000288 <LCD_STM32_SetCursor>
  LCD_STM32_Print_String("Curso Stm32");
 80007fc:	4816      	ldr	r0, [pc, #88]	; (8000858 <main+0xa8>)
 80007fe:	f7ff fdc5 	bl	800038c <LCD_STM32_Print_String>
  LCD_STM32_Write_New_Char(1);
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff ffb4 	bl	8000770 <LCD_STM32_Write_New_Char>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (i = 0; i < 99; i++) {
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <main+0xac>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
 800080e:	e01c      	b.n	800084a <main+0x9a>

		  sprintf(str_i,"%02u",i);
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <main+0xac>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4912      	ldr	r1, [pc, #72]	; (8000860 <main+0xb0>)
 8000818:	4812      	ldr	r0, [pc, #72]	; (8000864 <main+0xb4>)
 800081a:	f001 f8d9 	bl	80019d0 <siprintf>
		  LCD_STM32_SetCursor(14, FILA2);
 800081e:	2102      	movs	r1, #2
 8000820:	200e      	movs	r0, #14
 8000822:	f7ff fd31 	bl	8000288 <LCD_STM32_SetCursor>
		   LCD_STM32_Print_String(str_i);
 8000826:	480f      	ldr	r0, [pc, #60]	; (8000864 <main+0xb4>)
 8000828:	f7ff fdb0 	bl	800038c <LCD_STM32_Print_String>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800082c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <main+0xb8>)
 8000832:	f000 fc99 	bl	8001168 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8000836:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800083a:	f000 f9f1 	bl	8000c20 <HAL_Delay>
	  for (i = 0; i < 99; i++) {
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <main+0xac>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <main+0xac>)
 8000848:	701a      	strb	r2, [r3, #0]
 800084a:	4b04      	ldr	r3, [pc, #16]	; (800085c <main+0xac>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b62      	cmp	r3, #98	; 0x62
 8000850:	d9de      	bls.n	8000810 <main+0x60>
 8000852:	e7d9      	b.n	8000808 <main+0x58>
 8000854:	080022dc 	.word	0x080022dc
 8000858:	080022ec 	.word	0x080022ec
 800085c:	2000008c 	.word	0x2000008c
 8000860:	080022f8 	.word	0x080022f8
 8000864:	20000090 	.word	0x20000090
 8000868:	40011000 	.word	0x40011000

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b090      	sub	sp, #64	; 0x40
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 0318 	add.w	r3, r7, #24
 8000876:	2228      	movs	r2, #40	; 0x28
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f001 f8a0 	bl	80019c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088e:	2302      	movs	r3, #2
 8000890:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000892:	2301      	movs	r3, #1
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000896:	2310      	movs	r3, #16
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800089a:	2300      	movs	r3, #0
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	f107 0318 	add.w	r3, r7, #24
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fc7a 	bl	800119c <HAL_RCC_OscConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008ae:	f000 f893 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fee8 	bl	80016a0 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008d6:	f000 f87f 	bl	80009d8 <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3740      	adds	r7, #64	; 0x40
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f8:	4b33      	ldr	r3, [pc, #204]	; (80009c8 <MX_GPIO_Init+0xe4>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a32      	ldr	r2, [pc, #200]	; (80009c8 <MX_GPIO_Init+0xe4>)
 80008fe:	f043 0310 	orr.w	r3, r3, #16
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <MX_GPIO_Init+0xe4>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0310 	and.w	r3, r3, #16
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_GPIO_Init+0xe4>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a2c      	ldr	r2, [pc, #176]	; (80009c8 <MX_GPIO_Init+0xe4>)
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <MX_GPIO_Init+0xe4>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <MX_GPIO_Init+0xe4>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a26      	ldr	r2, [pc, #152]	; (80009c8 <MX_GPIO_Init+0xe4>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_GPIO_Init+0xe4>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000946:	4821      	ldr	r0, [pc, #132]	; (80009cc <MX_GPIO_Init+0xe8>)
 8000948:	f000 fbf6 	bl	8001138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|E_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f24c 0118 	movw	r1, #49176	; 0xc018
 8000952:	481f      	ldr	r0, [pc, #124]	; (80009d0 <MX_GPIO_Init+0xec>)
 8000954:	f000 fbf0 	bl	8001138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D6_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 800095e:	481d      	ldr	r0, [pc, #116]	; (80009d4 <MX_GPIO_Init+0xf0>)
 8000960:	f000 fbea 	bl	8001138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000968:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2302      	movs	r3, #2
 8000974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0310 	add.w	r3, r7, #16
 800097a:	4619      	mov	r1, r3
 800097c:	4813      	ldr	r0, [pc, #76]	; (80009cc <MX_GPIO_Init+0xe8>)
 800097e:	f000 fa57 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin|D5_Pin|D4_Pin;
 8000982:	f24c 0318 	movw	r3, #49176	; 0xc018
 8000986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2302      	movs	r3, #2
 8000992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4619      	mov	r1, r3
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_GPIO_Init+0xec>)
 800099c:	f000 fa48 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin;
 80009a0:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80009a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	4619      	mov	r1, r3
 80009b8:	4806      	ldr	r0, [pc, #24]	; (80009d4 <MX_GPIO_Init+0xf0>)
 80009ba:	f000 fa39 	bl	8000e30 <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40011000 	.word	0x40011000
 80009d0:	40010c00 	.word	0x40010c00
 80009d4:	40010800 	.word	0x40010800

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_MspInit+0x5c>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <HAL_MspInit+0x5c>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_MspInit+0x5c>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_MspInit+0x5c>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_MspInit+0x5c>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_MspInit+0x5c>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_MspInit+0x60>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <HAL_MspInit+0x60>)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010000 	.word	0x40010000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr

08000a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8e:	f000 f8ab 	bl	8000be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <_sbrk+0x5c>)
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <_sbrk+0x60>)
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <_sbrk+0x64>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <_sbrk+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d207      	bcs.n	8000ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac8:	f000 ff50 	bl	800196c <__errno>
 8000acc:	4603      	mov	r3, r0
 8000ace:	220c      	movs	r2, #12
 8000ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	e009      	b.n	8000aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <_sbrk+0x64>)
 8000ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20005000 	.word	0x20005000
 8000af8:	00000400 	.word	0x00000400
 8000afc:	20000094 	.word	0x20000094
 8000b00:	200000b0 	.word	0x200000b0

08000b04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	; (8000b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	; (8000b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b36:	f7ff ffe5 	bl	8000b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f000 ff1d 	bl	8001978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3e:	f7ff fe37 	bl	80007b0 <main>
  bx lr
 8000b42:	4770      	bx	lr
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b4c:	0800235c 	.word	0x0800235c
  ldr r2, =_sbss
 8000b50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b54:	200000ac 	.word	0x200000ac

08000b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_2_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_Init+0x28>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_Init+0x28>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f92b 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b72:	200f      	movs	r0, #15
 8000b74:	f000 f808 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b78:	f7ff ff34 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40022000 	.word	0x40022000

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x54>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_InitTick+0x58>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f935 	bl	8000e16 <HAL_SYSTICK_Config>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00e      	b.n	8000bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d80a      	bhi.n	8000bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f000 f90b 	bl	8000dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <HAL_InitTick+0x5c>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000004 	.word	0x20000004

08000be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x1c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_IncTick+0x20>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a03      	ldr	r2, [pc, #12]	; (8000c08 <HAL_IncTick+0x20>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000098 	.word	0x20000098

08000c0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b02      	ldr	r3, [pc, #8]	; (8000c1c <HAL_GetTick+0x10>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	20000098 	.word	0x20000098

08000c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff fff0 	bl	8000c0c <HAL_GetTick>
 8000c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d005      	beq.n	8000c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_Delay+0x44>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c46:	bf00      	nop
 8000c48:	f7ff ffe0 	bl	8000c0c <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8f7      	bhi.n	8000c48 <HAL_Delay+0x28>
  {
  }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db0a      	blt.n	8000cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	490c      	ldr	r1, [pc, #48]	; (8000d18 <__NVIC_SetPriority+0x4c>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	0112      	lsls	r2, r2, #4
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	440b      	add	r3, r1
 8000cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf4:	e00a      	b.n	8000d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4908      	ldr	r1, [pc, #32]	; (8000d1c <__NVIC_SetPriority+0x50>)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	3b04      	subs	r3, #4
 8000d04:	0112      	lsls	r2, r2, #4
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	440b      	add	r3, r1
 8000d0a:	761a      	strb	r2, [r3, #24]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f1c3 0307 	rsb	r3, r3, #7
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	bf28      	it	cs
 8000d3e:	2304      	movcs	r3, #4
 8000d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3304      	adds	r3, #4
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	d902      	bls.n	8000d50 <NVIC_EncodePriority+0x30>
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3b03      	subs	r3, #3
 8000d4e:	e000      	b.n	8000d52 <NVIC_EncodePriority+0x32>
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	401a      	ands	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43d9      	mvns	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	4313      	orrs	r3, r2
         );
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f7ff ff90 	bl	8000ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff49 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff5e 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff90 	bl	8000d20 <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5f 	bl	8000ccc <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffb0 	bl	8000d84 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b08b      	sub	sp, #44	; 0x2c
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e42:	e169      	b.n	8001118 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e44:	2201      	movs	r2, #1
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	69fa      	ldr	r2, [r7, #28]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	f040 8158 	bne.w	8001112 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	4a9a      	ldr	r2, [pc, #616]	; (80010d0 <HAL_GPIO_Init+0x2a0>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d05e      	beq.n	8000f2a <HAL_GPIO_Init+0xfa>
 8000e6c:	4a98      	ldr	r2, [pc, #608]	; (80010d0 <HAL_GPIO_Init+0x2a0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d875      	bhi.n	8000f5e <HAL_GPIO_Init+0x12e>
 8000e72:	4a98      	ldr	r2, [pc, #608]	; (80010d4 <HAL_GPIO_Init+0x2a4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d058      	beq.n	8000f2a <HAL_GPIO_Init+0xfa>
 8000e78:	4a96      	ldr	r2, [pc, #600]	; (80010d4 <HAL_GPIO_Init+0x2a4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d86f      	bhi.n	8000f5e <HAL_GPIO_Init+0x12e>
 8000e7e:	4a96      	ldr	r2, [pc, #600]	; (80010d8 <HAL_GPIO_Init+0x2a8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d052      	beq.n	8000f2a <HAL_GPIO_Init+0xfa>
 8000e84:	4a94      	ldr	r2, [pc, #592]	; (80010d8 <HAL_GPIO_Init+0x2a8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d869      	bhi.n	8000f5e <HAL_GPIO_Init+0x12e>
 8000e8a:	4a94      	ldr	r2, [pc, #592]	; (80010dc <HAL_GPIO_Init+0x2ac>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d04c      	beq.n	8000f2a <HAL_GPIO_Init+0xfa>
 8000e90:	4a92      	ldr	r2, [pc, #584]	; (80010dc <HAL_GPIO_Init+0x2ac>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d863      	bhi.n	8000f5e <HAL_GPIO_Init+0x12e>
 8000e96:	4a92      	ldr	r2, [pc, #584]	; (80010e0 <HAL_GPIO_Init+0x2b0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d046      	beq.n	8000f2a <HAL_GPIO_Init+0xfa>
 8000e9c:	4a90      	ldr	r2, [pc, #576]	; (80010e0 <HAL_GPIO_Init+0x2b0>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d85d      	bhi.n	8000f5e <HAL_GPIO_Init+0x12e>
 8000ea2:	2b12      	cmp	r3, #18
 8000ea4:	d82a      	bhi.n	8000efc <HAL_GPIO_Init+0xcc>
 8000ea6:	2b12      	cmp	r3, #18
 8000ea8:	d859      	bhi.n	8000f5e <HAL_GPIO_Init+0x12e>
 8000eaa:	a201      	add	r2, pc, #4	; (adr r2, 8000eb0 <HAL_GPIO_Init+0x80>)
 8000eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb0:	08000f2b 	.word	0x08000f2b
 8000eb4:	08000f05 	.word	0x08000f05
 8000eb8:	08000f17 	.word	0x08000f17
 8000ebc:	08000f59 	.word	0x08000f59
 8000ec0:	08000f5f 	.word	0x08000f5f
 8000ec4:	08000f5f 	.word	0x08000f5f
 8000ec8:	08000f5f 	.word	0x08000f5f
 8000ecc:	08000f5f 	.word	0x08000f5f
 8000ed0:	08000f5f 	.word	0x08000f5f
 8000ed4:	08000f5f 	.word	0x08000f5f
 8000ed8:	08000f5f 	.word	0x08000f5f
 8000edc:	08000f5f 	.word	0x08000f5f
 8000ee0:	08000f5f 	.word	0x08000f5f
 8000ee4:	08000f5f 	.word	0x08000f5f
 8000ee8:	08000f5f 	.word	0x08000f5f
 8000eec:	08000f5f 	.word	0x08000f5f
 8000ef0:	08000f5f 	.word	0x08000f5f
 8000ef4:	08000f0d 	.word	0x08000f0d
 8000ef8:	08000f21 	.word	0x08000f21
 8000efc:	4a79      	ldr	r2, [pc, #484]	; (80010e4 <HAL_GPIO_Init+0x2b4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d013      	beq.n	8000f2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f02:	e02c      	b.n	8000f5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	623b      	str	r3, [r7, #32]
          break;
 8000f0a:	e029      	b.n	8000f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	3304      	adds	r3, #4
 8000f12:	623b      	str	r3, [r7, #32]
          break;
 8000f14:	e024      	b.n	8000f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	3308      	adds	r3, #8
 8000f1c:	623b      	str	r3, [r7, #32]
          break;
 8000f1e:	e01f      	b.n	8000f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	330c      	adds	r3, #12
 8000f26:	623b      	str	r3, [r7, #32]
          break;
 8000f28:	e01a      	b.n	8000f60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d102      	bne.n	8000f38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f32:	2304      	movs	r3, #4
 8000f34:	623b      	str	r3, [r7, #32]
          break;
 8000f36:	e013      	b.n	8000f60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d105      	bne.n	8000f4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f40:	2308      	movs	r3, #8
 8000f42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	611a      	str	r2, [r3, #16]
          break;
 8000f4a:	e009      	b.n	8000f60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69fa      	ldr	r2, [r7, #28]
 8000f54:	615a      	str	r2, [r3, #20]
          break;
 8000f56:	e003      	b.n	8000f60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
          break;
 8000f5c:	e000      	b.n	8000f60 <HAL_GPIO_Init+0x130>
          break;
 8000f5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	2bff      	cmp	r3, #255	; 0xff
 8000f64:	d801      	bhi.n	8000f6a <HAL_GPIO_Init+0x13a>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	e001      	b.n	8000f6e <HAL_GPIO_Init+0x13e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	2bff      	cmp	r3, #255	; 0xff
 8000f74:	d802      	bhi.n	8000f7c <HAL_GPIO_Init+0x14c>
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	e002      	b.n	8000f82 <HAL_GPIO_Init+0x152>
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7e:	3b08      	subs	r3, #8
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	210f      	movs	r1, #15
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	401a      	ands	r2, r3
 8000f94:	6a39      	ldr	r1, [r7, #32]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 80b1 	beq.w	8001112 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb0:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <HAL_GPIO_Init+0x2b8>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <HAL_GPIO_Init+0x2b8>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b4a      	ldr	r3, [pc, #296]	; (80010e8 <HAL_GPIO_Init+0x2b8>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fc8:	4a48      	ldr	r2, [pc, #288]	; (80010ec <HAL_GPIO_Init+0x2bc>)
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a40      	ldr	r2, [pc, #256]	; (80010f0 <HAL_GPIO_Init+0x2c0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d013      	beq.n	800101c <HAL_GPIO_Init+0x1ec>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a3f      	ldr	r2, [pc, #252]	; (80010f4 <HAL_GPIO_Init+0x2c4>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d00d      	beq.n	8001018 <HAL_GPIO_Init+0x1e8>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a3e      	ldr	r2, [pc, #248]	; (80010f8 <HAL_GPIO_Init+0x2c8>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d007      	beq.n	8001014 <HAL_GPIO_Init+0x1e4>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a3d      	ldr	r2, [pc, #244]	; (80010fc <HAL_GPIO_Init+0x2cc>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d101      	bne.n	8001010 <HAL_GPIO_Init+0x1e0>
 800100c:	2303      	movs	r3, #3
 800100e:	e006      	b.n	800101e <HAL_GPIO_Init+0x1ee>
 8001010:	2304      	movs	r3, #4
 8001012:	e004      	b.n	800101e <HAL_GPIO_Init+0x1ee>
 8001014:	2302      	movs	r3, #2
 8001016:	e002      	b.n	800101e <HAL_GPIO_Init+0x1ee>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <HAL_GPIO_Init+0x1ee>
 800101c:	2300      	movs	r3, #0
 800101e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001020:	f002 0203 	and.w	r2, r2, #3
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	4093      	lsls	r3, r2
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800102e:	492f      	ldr	r1, [pc, #188]	; (80010ec <HAL_GPIO_Init+0x2bc>)
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3302      	adds	r3, #2
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d006      	beq.n	8001056 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001048:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <HAL_GPIO_Init+0x2d0>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	492c      	ldr	r1, [pc, #176]	; (8001100 <HAL_GPIO_Init+0x2d0>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	600b      	str	r3, [r1, #0]
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <HAL_GPIO_Init+0x2d0>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	43db      	mvns	r3, r3
 800105e:	4928      	ldr	r1, [pc, #160]	; (8001100 <HAL_GPIO_Init+0x2d0>)
 8001060:	4013      	ands	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <HAL_GPIO_Init+0x2d0>)
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	4922      	ldr	r1, [pc, #136]	; (8001100 <HAL_GPIO_Init+0x2d0>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	604b      	str	r3, [r1, #4]
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <HAL_GPIO_Init+0x2d0>)
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	43db      	mvns	r3, r3
 8001086:	491e      	ldr	r1, [pc, #120]	; (8001100 <HAL_GPIO_Init+0x2d0>)
 8001088:	4013      	ands	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_GPIO_Init+0x2d0>)
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	4918      	ldr	r1, [pc, #96]	; (8001100 <HAL_GPIO_Init+0x2d0>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	608b      	str	r3, [r1, #8]
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_GPIO_Init+0x2d0>)
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	4914      	ldr	r1, [pc, #80]	; (8001100 <HAL_GPIO_Init+0x2d0>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d021      	beq.n	8001104 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_GPIO_Init+0x2d0>)
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	490e      	ldr	r1, [pc, #56]	; (8001100 <HAL_GPIO_Init+0x2d0>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	60cb      	str	r3, [r1, #12]
 80010cc:	e021      	b.n	8001112 <HAL_GPIO_Init+0x2e2>
 80010ce:	bf00      	nop
 80010d0:	10320000 	.word	0x10320000
 80010d4:	10310000 	.word	0x10310000
 80010d8:	10220000 	.word	0x10220000
 80010dc:	10210000 	.word	0x10210000
 80010e0:	10120000 	.word	0x10120000
 80010e4:	10110000 	.word	0x10110000
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010000 	.word	0x40010000
 80010f0:	40010800 	.word	0x40010800
 80010f4:	40010c00 	.word	0x40010c00
 80010f8:	40011000 	.word	0x40011000
 80010fc:	40011400 	.word	0x40011400
 8001100:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_GPIO_Init+0x304>)
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	43db      	mvns	r3, r3
 800110c:	4909      	ldr	r1, [pc, #36]	; (8001134 <HAL_GPIO_Init+0x304>)
 800110e:	4013      	ands	r3, r2
 8001110:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	3301      	adds	r3, #1
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	fa22 f303 	lsr.w	r3, r2, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	f47f ae8e 	bne.w	8000e44 <HAL_GPIO_Init+0x14>
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	372c      	adds	r7, #44	; 0x2c
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	40010400 	.word	0x40010400

08001138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	807b      	strh	r3, [r7, #2]
 8001144:	4613      	mov	r3, r2
 8001146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001148:	787b      	ldrb	r3, [r7, #1]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001154:	e003      	b.n	800115e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001156:	887b      	ldrh	r3, [r7, #2]
 8001158:	041a      	lsls	r2, r3, #16
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	611a      	str	r2, [r3, #16]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4013      	ands	r3, r2
 8001180:	041a      	lsls	r2, r3, #16
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43d9      	mvns	r1, r3
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	400b      	ands	r3, r1
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	611a      	str	r2, [r3, #16]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
	...

0800119c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e272      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 8087 	beq.w	80012ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011bc:	4b92      	ldr	r3, [pc, #584]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 030c 	and.w	r3, r3, #12
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d00c      	beq.n	80011e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011c8:	4b8f      	ldr	r3, [pc, #572]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 030c 	and.w	r3, r3, #12
 80011d0:	2b08      	cmp	r3, #8
 80011d2:	d112      	bne.n	80011fa <HAL_RCC_OscConfig+0x5e>
 80011d4:	4b8c      	ldr	r3, [pc, #560]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e0:	d10b      	bne.n	80011fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e2:	4b89      	ldr	r3, [pc, #548]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d06c      	beq.n	80012c8 <HAL_RCC_OscConfig+0x12c>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d168      	bne.n	80012c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e24c      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001202:	d106      	bne.n	8001212 <HAL_RCC_OscConfig+0x76>
 8001204:	4b80      	ldr	r3, [pc, #512]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a7f      	ldr	r2, [pc, #508]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800120a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	e02e      	b.n	8001270 <HAL_RCC_OscConfig+0xd4>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10c      	bne.n	8001234 <HAL_RCC_OscConfig+0x98>
 800121a:	4b7b      	ldr	r3, [pc, #492]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a7a      	ldr	r2, [pc, #488]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	4b78      	ldr	r3, [pc, #480]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a77      	ldr	r2, [pc, #476]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800122c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e01d      	b.n	8001270 <HAL_RCC_OscConfig+0xd4>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800123c:	d10c      	bne.n	8001258 <HAL_RCC_OscConfig+0xbc>
 800123e:	4b72      	ldr	r3, [pc, #456]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a71      	ldr	r2, [pc, #452]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	4b6f      	ldr	r3, [pc, #444]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a6e      	ldr	r2, [pc, #440]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e00b      	b.n	8001270 <HAL_RCC_OscConfig+0xd4>
 8001258:	4b6b      	ldr	r3, [pc, #428]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a6a      	ldr	r2, [pc, #424]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800125e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	4b68      	ldr	r3, [pc, #416]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a67      	ldr	r2, [pc, #412]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800126a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d013      	beq.n	80012a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fcc8 	bl	8000c0c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fcc4 	bl	8000c0c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	; 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e200      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	4b5d      	ldr	r3, [pc, #372]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <HAL_RCC_OscConfig+0xe4>
 800129e:	e014      	b.n	80012ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fcb4 	bl	8000c0c <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a8:	f7ff fcb0 	bl	8000c0c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b64      	cmp	r3, #100	; 0x64
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e1ec      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ba:	4b53      	ldr	r3, [pc, #332]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x10c>
 80012c6:	e000      	b.n	80012ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d063      	beq.n	800139e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012d6:	4b4c      	ldr	r3, [pc, #304]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012e2:	4b49      	ldr	r3, [pc, #292]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d11c      	bne.n	8001328 <HAL_RCC_OscConfig+0x18c>
 80012ee:	4b46      	ldr	r3, [pc, #280]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d116      	bne.n	8001328 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	4b43      	ldr	r3, [pc, #268]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d005      	beq.n	8001312 <HAL_RCC_OscConfig+0x176>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d001      	beq.n	8001312 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e1c0      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001312:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4939      	ldr	r1, [pc, #228]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001326:	e03a      	b.n	800139e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d020      	beq.n	8001372 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001330:	4b36      	ldr	r3, [pc, #216]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fc69 	bl	8000c0c <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133e:	f7ff fc65 	bl	8000c0c <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e1a1      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001350:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4927      	ldr	r1, [pc, #156]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]
 8001370:	e015      	b.n	800139e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fc48 	bl	8000c0c <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001380:	f7ff fc44 	bl	8000c0c <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e180      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d03a      	beq.n	8001420 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d019      	beq.n	80013e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_RCC_OscConfig+0x274>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b8:	f7ff fc28 	bl	8000c0c <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff fc24 	bl	8000c0c <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e160      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013de:	2001      	movs	r0, #1
 80013e0:	f000 faa6 	bl	8001930 <RCC_Delay>
 80013e4:	e01c      	b.n	8001420 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_RCC_OscConfig+0x274>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ec:	f7ff fc0e 	bl	8000c0c <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f2:	e00f      	b.n	8001414 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f4:	f7ff fc0a 	bl	8000c0c <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d908      	bls.n	8001414 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e146      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	42420000 	.word	0x42420000
 8001410:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001414:	4b92      	ldr	r3, [pc, #584]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e9      	bne.n	80013f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 80a6 	beq.w	800157a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001432:	4b8b      	ldr	r3, [pc, #556]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10d      	bne.n	800145a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b88      	ldr	r3, [pc, #544]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a87      	ldr	r2, [pc, #540]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	61d3      	str	r3, [r2, #28]
 800144a:	4b85      	ldr	r3, [pc, #532]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001456:	2301      	movs	r3, #1
 8001458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145a:	4b82      	ldr	r3, [pc, #520]	; (8001664 <HAL_RCC_OscConfig+0x4c8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d118      	bne.n	8001498 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001466:	4b7f      	ldr	r3, [pc, #508]	; (8001664 <HAL_RCC_OscConfig+0x4c8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a7e      	ldr	r2, [pc, #504]	; (8001664 <HAL_RCC_OscConfig+0x4c8>)
 800146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001472:	f7ff fbcb 	bl	8000c0c <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800147a:	f7ff fbc7 	bl	8000c0c <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b64      	cmp	r3, #100	; 0x64
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e103      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148c:	4b75      	ldr	r3, [pc, #468]	; (8001664 <HAL_RCC_OscConfig+0x4c8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d106      	bne.n	80014ae <HAL_RCC_OscConfig+0x312>
 80014a0:	4b6f      	ldr	r3, [pc, #444]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4a6e      	ldr	r2, [pc, #440]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6213      	str	r3, [r2, #32]
 80014ac:	e02d      	b.n	800150a <HAL_RCC_OscConfig+0x36e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x334>
 80014b6:	4b6a      	ldr	r3, [pc, #424]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4a69      	ldr	r2, [pc, #420]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	6213      	str	r3, [r2, #32]
 80014c2:	4b67      	ldr	r3, [pc, #412]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4a66      	ldr	r2, [pc, #408]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	f023 0304 	bic.w	r3, r3, #4
 80014cc:	6213      	str	r3, [r2, #32]
 80014ce:	e01c      	b.n	800150a <HAL_RCC_OscConfig+0x36e>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	d10c      	bne.n	80014f2 <HAL_RCC_OscConfig+0x356>
 80014d8:	4b61      	ldr	r3, [pc, #388]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	4a60      	ldr	r2, [pc, #384]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	6213      	str	r3, [r2, #32]
 80014e4:	4b5e      	ldr	r3, [pc, #376]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4a5d      	ldr	r2, [pc, #372]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6213      	str	r3, [r2, #32]
 80014f0:	e00b      	b.n	800150a <HAL_RCC_OscConfig+0x36e>
 80014f2:	4b5b      	ldr	r3, [pc, #364]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	4a5a      	ldr	r2, [pc, #360]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	6213      	str	r3, [r2, #32]
 80014fe:	4b58      	ldr	r3, [pc, #352]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	4a57      	ldr	r2, [pc, #348]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	f023 0304 	bic.w	r3, r3, #4
 8001508:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d015      	beq.n	800153e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff fb7b 	bl	8000c0c <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001518:	e00a      	b.n	8001530 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f7ff fb77 	bl	8000c0c <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f241 3288 	movw	r2, #5000	; 0x1388
 8001528:	4293      	cmp	r3, r2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e0b1      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001530:	4b4b      	ldr	r3, [pc, #300]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0ee      	beq.n	800151a <HAL_RCC_OscConfig+0x37e>
 800153c:	e014      	b.n	8001568 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153e:	f7ff fb65 	bl	8000c0c <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001544:	e00a      	b.n	800155c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f7ff fb61 	bl	8000c0c <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	f241 3288 	movw	r2, #5000	; 0x1388
 8001554:	4293      	cmp	r3, r2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e09b      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155c:	4b40      	ldr	r3, [pc, #256]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1ee      	bne.n	8001546 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001568:	7dfb      	ldrb	r3, [r7, #23]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d105      	bne.n	800157a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156e:	4b3c      	ldr	r3, [pc, #240]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a3b      	ldr	r2, [pc, #236]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001578:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 8087 	beq.w	8001692 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001584:	4b36      	ldr	r3, [pc, #216]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	2b08      	cmp	r3, #8
 800158e:	d061      	beq.n	8001654 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d146      	bne.n	8001626 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001598:	4b33      	ldr	r3, [pc, #204]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff fb35 	bl	8000c0c <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a6:	f7ff fb31 	bl	8000c0c <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e06d      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f0      	bne.n	80015a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d108      	bne.n	80015e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	4921      	ldr	r1, [pc, #132]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a19      	ldr	r1, [r3, #32]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	430b      	orrs	r3, r1
 80015f2:	491b      	ldr	r1, [pc, #108]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fb05 	bl	8000c0c <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001606:	f7ff fb01 	bl	8000c0c <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e03d      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x46a>
 8001624:	e035      	b.n	8001692 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff faee 	bl	8000c0c <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff faea 	bl	8000c0c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e026      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x498>
 8001652:	e01e      	b.n	8001692 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e019      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
 8001660:	40021000 	.word	0x40021000
 8001664:	40007000 	.word	0x40007000
 8001668:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_RCC_OscConfig+0x500>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	429a      	cmp	r2, r3
 800167e:	d106      	bne.n	800168e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	429a      	cmp	r2, r3
 800168c:	d001      	beq.n	8001692 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000

080016a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0d0      	b.n	8001856 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016b4:	4b6a      	ldr	r3, [pc, #424]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d910      	bls.n	80016e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b67      	ldr	r3, [pc, #412]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 0207 	bic.w	r2, r3, #7
 80016ca:	4965      	ldr	r1, [pc, #404]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b63      	ldr	r3, [pc, #396]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0b8      	b.n	8001856 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d020      	beq.n	8001732 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016fc:	4b59      	ldr	r3, [pc, #356]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a58      	ldr	r2, [pc, #352]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001706:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001714:	4b53      	ldr	r3, [pc, #332]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a52      	ldr	r2, [pc, #328]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800171e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001720:	4b50      	ldr	r3, [pc, #320]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	494d      	ldr	r1, [pc, #308]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d040      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d107      	bne.n	8001756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	4b47      	ldr	r3, [pc, #284]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d115      	bne.n	800177e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e07f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175e:	4b41      	ldr	r3, [pc, #260]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e073      	b.n	8001856 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176e:	4b3d      	ldr	r3, [pc, #244]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e06b      	b.n	8001856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800177e:	4b39      	ldr	r3, [pc, #228]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f023 0203 	bic.w	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4936      	ldr	r1, [pc, #216]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001790:	f7ff fa3c 	bl	8000c0c <HAL_GetTick>
 8001794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001796:	e00a      	b.n	80017ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001798:	f7ff fa38 	bl	8000c0c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e053      	b.n	8001856 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ae:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 020c 	and.w	r2, r3, #12
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	429a      	cmp	r2, r3
 80017be:	d1eb      	bne.n	8001798 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d210      	bcs.n	80017f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f023 0207 	bic.w	r2, r3, #7
 80017d6:	4922      	ldr	r1, [pc, #136]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e032      	b.n	8001856 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4916      	ldr	r1, [pc, #88]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	4313      	orrs	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	490e      	ldr	r1, [pc, #56]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800182e:	f000 f821 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8001832:	4602      	mov	r2, r0
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	490a      	ldr	r1, [pc, #40]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001840:	5ccb      	ldrb	r3, [r1, r3]
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <HAL_RCC_ClockConfig+0x1cc>)
 8001848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_ClockConfig+0x1d0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff f99a 	bl	8000b88 <HAL_InitTick>

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40022000 	.word	0x40022000
 8001864:	40021000 	.word	0x40021000
 8001868:	08002310 	.word	0x08002310
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001874:	b490      	push	{r4, r7}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800187a:	4b29      	ldr	r3, [pc, #164]	; (8001920 <HAL_RCC_GetSysClockFreq+0xac>)
 800187c:	1d3c      	adds	r4, r7, #4
 800187e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001884:	f240 2301 	movw	r3, #513	; 0x201
 8001888:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800189e:	4b21      	ldr	r3, [pc, #132]	; (8001924 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d002      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x40>
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d003      	beq.n	80018ba <HAL_RCC_GetSysClockFreq+0x46>
 80018b2:	e02b      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018b6:	623b      	str	r3, [r7, #32]
      break;
 80018b8:	e02b      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3328      	adds	r3, #40	; 0x28
 80018c4:	443b      	add	r3, r7
 80018c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d012      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	0c5b      	lsrs	r3, r3, #17
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	3328      	adds	r3, #40	; 0x28
 80018e2:	443b      	add	r3, r7
 80018e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018ee:	fb03 f202 	mul.w	r2, r3, r2
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
 80018fa:	e004      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001900:	fb02 f303 	mul.w	r3, r2, r3
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	623b      	str	r3, [r7, #32]
      break;
 800190a:	e002      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_RCC_GetSysClockFreq+0xb4>)
 800190e:	623b      	str	r3, [r7, #32]
      break;
 8001910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001912:	6a3b      	ldr	r3, [r7, #32]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3728      	adds	r7, #40	; 0x28
 8001918:	46bd      	mov	sp, r7
 800191a:	bc90      	pop	{r4, r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	08002300 	.word	0x08002300
 8001924:	40021000 	.word	0x40021000
 8001928:	007a1200 	.word	0x007a1200
 800192c:	003d0900 	.word	0x003d0900

08001930 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <RCC_Delay+0x34>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <RCC_Delay+0x38>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	0a5b      	lsrs	r3, r3, #9
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	fb02 f303 	mul.w	r3, r2, r3
 800194a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800194c:	bf00      	nop
  }
  while (Delay --);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1e5a      	subs	r2, r3, #1
 8001952:	60fa      	str	r2, [r7, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f9      	bne.n	800194c <RCC_Delay+0x1c>
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	20000000 	.word	0x20000000
 8001968:	10624dd3 	.word	0x10624dd3

0800196c <__errno>:
 800196c:	4b01      	ldr	r3, [pc, #4]	; (8001974 <__errno+0x8>)
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	2000000c 	.word	0x2000000c

08001978 <__libc_init_array>:
 8001978:	b570      	push	{r4, r5, r6, lr}
 800197a:	2600      	movs	r6, #0
 800197c:	4d0c      	ldr	r5, [pc, #48]	; (80019b0 <__libc_init_array+0x38>)
 800197e:	4c0d      	ldr	r4, [pc, #52]	; (80019b4 <__libc_init_array+0x3c>)
 8001980:	1b64      	subs	r4, r4, r5
 8001982:	10a4      	asrs	r4, r4, #2
 8001984:	42a6      	cmp	r6, r4
 8001986:	d109      	bne.n	800199c <__libc_init_array+0x24>
 8001988:	f000 fc9c 	bl	80022c4 <_init>
 800198c:	2600      	movs	r6, #0
 800198e:	4d0a      	ldr	r5, [pc, #40]	; (80019b8 <__libc_init_array+0x40>)
 8001990:	4c0a      	ldr	r4, [pc, #40]	; (80019bc <__libc_init_array+0x44>)
 8001992:	1b64      	subs	r4, r4, r5
 8001994:	10a4      	asrs	r4, r4, #2
 8001996:	42a6      	cmp	r6, r4
 8001998:	d105      	bne.n	80019a6 <__libc_init_array+0x2e>
 800199a:	bd70      	pop	{r4, r5, r6, pc}
 800199c:	f855 3b04 	ldr.w	r3, [r5], #4
 80019a0:	4798      	blx	r3
 80019a2:	3601      	adds	r6, #1
 80019a4:	e7ee      	b.n	8001984 <__libc_init_array+0xc>
 80019a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80019aa:	4798      	blx	r3
 80019ac:	3601      	adds	r6, #1
 80019ae:	e7f2      	b.n	8001996 <__libc_init_array+0x1e>
 80019b0:	08002354 	.word	0x08002354
 80019b4:	08002354 	.word	0x08002354
 80019b8:	08002354 	.word	0x08002354
 80019bc:	08002358 	.word	0x08002358

080019c0 <memset>:
 80019c0:	4603      	mov	r3, r0
 80019c2:	4402      	add	r2, r0
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d100      	bne.n	80019ca <memset+0xa>
 80019c8:	4770      	bx	lr
 80019ca:	f803 1b01 	strb.w	r1, [r3], #1
 80019ce:	e7f9      	b.n	80019c4 <memset+0x4>

080019d0 <siprintf>:
 80019d0:	b40e      	push	{r1, r2, r3}
 80019d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80019d6:	b500      	push	{lr}
 80019d8:	b09c      	sub	sp, #112	; 0x70
 80019da:	ab1d      	add	r3, sp, #116	; 0x74
 80019dc:	9002      	str	r0, [sp, #8]
 80019de:	9006      	str	r0, [sp, #24]
 80019e0:	9107      	str	r1, [sp, #28]
 80019e2:	9104      	str	r1, [sp, #16]
 80019e4:	4808      	ldr	r0, [pc, #32]	; (8001a08 <siprintf+0x38>)
 80019e6:	4909      	ldr	r1, [pc, #36]	; (8001a0c <siprintf+0x3c>)
 80019e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80019ec:	9105      	str	r1, [sp, #20]
 80019ee:	6800      	ldr	r0, [r0, #0]
 80019f0:	a902      	add	r1, sp, #8
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	f000 f868 	bl	8001ac8 <_svfiprintf_r>
 80019f8:	2200      	movs	r2, #0
 80019fa:	9b02      	ldr	r3, [sp, #8]
 80019fc:	701a      	strb	r2, [r3, #0]
 80019fe:	b01c      	add	sp, #112	; 0x70
 8001a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a04:	b003      	add	sp, #12
 8001a06:	4770      	bx	lr
 8001a08:	2000000c 	.word	0x2000000c
 8001a0c:	ffff0208 	.word	0xffff0208

08001a10 <__ssputs_r>:
 8001a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a14:	688e      	ldr	r6, [r1, #8]
 8001a16:	4682      	mov	sl, r0
 8001a18:	429e      	cmp	r6, r3
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	4690      	mov	r8, r2
 8001a1e:	461f      	mov	r7, r3
 8001a20:	d838      	bhi.n	8001a94 <__ssputs_r+0x84>
 8001a22:	898a      	ldrh	r2, [r1, #12]
 8001a24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001a28:	d032      	beq.n	8001a90 <__ssputs_r+0x80>
 8001a2a:	6825      	ldr	r5, [r4, #0]
 8001a2c:	6909      	ldr	r1, [r1, #16]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	eba5 0901 	sub.w	r9, r5, r1
 8001a34:	6965      	ldr	r5, [r4, #20]
 8001a36:	444b      	add	r3, r9
 8001a38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001a40:	106d      	asrs	r5, r5, #1
 8001a42:	429d      	cmp	r5, r3
 8001a44:	bf38      	it	cc
 8001a46:	461d      	movcc	r5, r3
 8001a48:	0553      	lsls	r3, r2, #21
 8001a4a:	d531      	bpl.n	8001ab0 <__ssputs_r+0xa0>
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	f000 fb6f 	bl	8002130 <_malloc_r>
 8001a52:	4606      	mov	r6, r0
 8001a54:	b950      	cbnz	r0, 8001a6c <__ssputs_r+0x5c>
 8001a56:	230c      	movs	r3, #12
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f8ca 3000 	str.w	r3, [sl]
 8001a60:	89a3      	ldrh	r3, [r4, #12]
 8001a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a66:	81a3      	strh	r3, [r4, #12]
 8001a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a6c:	464a      	mov	r2, r9
 8001a6e:	6921      	ldr	r1, [r4, #16]
 8001a70:	f000 face 	bl	8002010 <memcpy>
 8001a74:	89a3      	ldrh	r3, [r4, #12]
 8001a76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7e:	81a3      	strh	r3, [r4, #12]
 8001a80:	6126      	str	r6, [r4, #16]
 8001a82:	444e      	add	r6, r9
 8001a84:	6026      	str	r6, [r4, #0]
 8001a86:	463e      	mov	r6, r7
 8001a88:	6165      	str	r5, [r4, #20]
 8001a8a:	eba5 0509 	sub.w	r5, r5, r9
 8001a8e:	60a5      	str	r5, [r4, #8]
 8001a90:	42be      	cmp	r6, r7
 8001a92:	d900      	bls.n	8001a96 <__ssputs_r+0x86>
 8001a94:	463e      	mov	r6, r7
 8001a96:	4632      	mov	r2, r6
 8001a98:	4641      	mov	r1, r8
 8001a9a:	6820      	ldr	r0, [r4, #0]
 8001a9c:	f000 fac6 	bl	800202c <memmove>
 8001aa0:	68a3      	ldr	r3, [r4, #8]
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	1b9b      	subs	r3, r3, r6
 8001aa6:	60a3      	str	r3, [r4, #8]
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	4433      	add	r3, r6
 8001aac:	6023      	str	r3, [r4, #0]
 8001aae:	e7db      	b.n	8001a68 <__ssputs_r+0x58>
 8001ab0:	462a      	mov	r2, r5
 8001ab2:	f000 fbb1 	bl	8002218 <_realloc_r>
 8001ab6:	4606      	mov	r6, r0
 8001ab8:	2800      	cmp	r0, #0
 8001aba:	d1e1      	bne.n	8001a80 <__ssputs_r+0x70>
 8001abc:	4650      	mov	r0, sl
 8001abe:	6921      	ldr	r1, [r4, #16]
 8001ac0:	f000 face 	bl	8002060 <_free_r>
 8001ac4:	e7c7      	b.n	8001a56 <__ssputs_r+0x46>
	...

08001ac8 <_svfiprintf_r>:
 8001ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001acc:	4698      	mov	r8, r3
 8001ace:	898b      	ldrh	r3, [r1, #12]
 8001ad0:	4607      	mov	r7, r0
 8001ad2:	061b      	lsls	r3, r3, #24
 8001ad4:	460d      	mov	r5, r1
 8001ad6:	4614      	mov	r4, r2
 8001ad8:	b09d      	sub	sp, #116	; 0x74
 8001ada:	d50e      	bpl.n	8001afa <_svfiprintf_r+0x32>
 8001adc:	690b      	ldr	r3, [r1, #16]
 8001ade:	b963      	cbnz	r3, 8001afa <_svfiprintf_r+0x32>
 8001ae0:	2140      	movs	r1, #64	; 0x40
 8001ae2:	f000 fb25 	bl	8002130 <_malloc_r>
 8001ae6:	6028      	str	r0, [r5, #0]
 8001ae8:	6128      	str	r0, [r5, #16]
 8001aea:	b920      	cbnz	r0, 8001af6 <_svfiprintf_r+0x2e>
 8001aec:	230c      	movs	r3, #12
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	e0d1      	b.n	8001c9a <_svfiprintf_r+0x1d2>
 8001af6:	2340      	movs	r3, #64	; 0x40
 8001af8:	616b      	str	r3, [r5, #20]
 8001afa:	2300      	movs	r3, #0
 8001afc:	9309      	str	r3, [sp, #36]	; 0x24
 8001afe:	2320      	movs	r3, #32
 8001b00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b04:	2330      	movs	r3, #48	; 0x30
 8001b06:	f04f 0901 	mov.w	r9, #1
 8001b0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001cb4 <_svfiprintf_r+0x1ec>
 8001b12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b16:	4623      	mov	r3, r4
 8001b18:	469a      	mov	sl, r3
 8001b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b1e:	b10a      	cbz	r2, 8001b24 <_svfiprintf_r+0x5c>
 8001b20:	2a25      	cmp	r2, #37	; 0x25
 8001b22:	d1f9      	bne.n	8001b18 <_svfiprintf_r+0x50>
 8001b24:	ebba 0b04 	subs.w	fp, sl, r4
 8001b28:	d00b      	beq.n	8001b42 <_svfiprintf_r+0x7a>
 8001b2a:	465b      	mov	r3, fp
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	4638      	mov	r0, r7
 8001b32:	f7ff ff6d 	bl	8001a10 <__ssputs_r>
 8001b36:	3001      	adds	r0, #1
 8001b38:	f000 80aa 	beq.w	8001c90 <_svfiprintf_r+0x1c8>
 8001b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b3e:	445a      	add	r2, fp
 8001b40:	9209      	str	r2, [sp, #36]	; 0x24
 8001b42:	f89a 3000 	ldrb.w	r3, [sl]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80a2 	beq.w	8001c90 <_svfiprintf_r+0x1c8>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b56:	f10a 0a01 	add.w	sl, sl, #1
 8001b5a:	9304      	str	r3, [sp, #16]
 8001b5c:	9307      	str	r3, [sp, #28]
 8001b5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b62:	931a      	str	r3, [sp, #104]	; 0x68
 8001b64:	4654      	mov	r4, sl
 8001b66:	2205      	movs	r2, #5
 8001b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b6c:	4851      	ldr	r0, [pc, #324]	; (8001cb4 <_svfiprintf_r+0x1ec>)
 8001b6e:	f000 fa41 	bl	8001ff4 <memchr>
 8001b72:	9a04      	ldr	r2, [sp, #16]
 8001b74:	b9d8      	cbnz	r0, 8001bae <_svfiprintf_r+0xe6>
 8001b76:	06d0      	lsls	r0, r2, #27
 8001b78:	bf44      	itt	mi
 8001b7a:	2320      	movmi	r3, #32
 8001b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b80:	0711      	lsls	r1, r2, #28
 8001b82:	bf44      	itt	mi
 8001b84:	232b      	movmi	r3, #43	; 0x2b
 8001b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8001b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8001b90:	d015      	beq.n	8001bbe <_svfiprintf_r+0xf6>
 8001b92:	4654      	mov	r4, sl
 8001b94:	2000      	movs	r0, #0
 8001b96:	f04f 0c0a 	mov.w	ip, #10
 8001b9a:	9a07      	ldr	r2, [sp, #28]
 8001b9c:	4621      	mov	r1, r4
 8001b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ba2:	3b30      	subs	r3, #48	; 0x30
 8001ba4:	2b09      	cmp	r3, #9
 8001ba6:	d94e      	bls.n	8001c46 <_svfiprintf_r+0x17e>
 8001ba8:	b1b0      	cbz	r0, 8001bd8 <_svfiprintf_r+0x110>
 8001baa:	9207      	str	r2, [sp, #28]
 8001bac:	e014      	b.n	8001bd8 <_svfiprintf_r+0x110>
 8001bae:	eba0 0308 	sub.w	r3, r0, r8
 8001bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	46a2      	mov	sl, r4
 8001bba:	9304      	str	r3, [sp, #16]
 8001bbc:	e7d2      	b.n	8001b64 <_svfiprintf_r+0x9c>
 8001bbe:	9b03      	ldr	r3, [sp, #12]
 8001bc0:	1d19      	adds	r1, r3, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	9103      	str	r1, [sp, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	bfbb      	ittet	lt
 8001bca:	425b      	neglt	r3, r3
 8001bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8001bd0:	9307      	strge	r3, [sp, #28]
 8001bd2:	9307      	strlt	r3, [sp, #28]
 8001bd4:	bfb8      	it	lt
 8001bd6:	9204      	strlt	r2, [sp, #16]
 8001bd8:	7823      	ldrb	r3, [r4, #0]
 8001bda:	2b2e      	cmp	r3, #46	; 0x2e
 8001bdc:	d10c      	bne.n	8001bf8 <_svfiprintf_r+0x130>
 8001bde:	7863      	ldrb	r3, [r4, #1]
 8001be0:	2b2a      	cmp	r3, #42	; 0x2a
 8001be2:	d135      	bne.n	8001c50 <_svfiprintf_r+0x188>
 8001be4:	9b03      	ldr	r3, [sp, #12]
 8001be6:	3402      	adds	r4, #2
 8001be8:	1d1a      	adds	r2, r3, #4
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	9203      	str	r2, [sp, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	bfb8      	it	lt
 8001bf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8001bf6:	9305      	str	r3, [sp, #20]
 8001bf8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001cb8 <_svfiprintf_r+0x1f0>
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	4650      	mov	r0, sl
 8001c00:	7821      	ldrb	r1, [r4, #0]
 8001c02:	f000 f9f7 	bl	8001ff4 <memchr>
 8001c06:	b140      	cbz	r0, 8001c1a <_svfiprintf_r+0x152>
 8001c08:	2340      	movs	r3, #64	; 0x40
 8001c0a:	eba0 000a 	sub.w	r0, r0, sl
 8001c0e:	fa03 f000 	lsl.w	r0, r3, r0
 8001c12:	9b04      	ldr	r3, [sp, #16]
 8001c14:	3401      	adds	r4, #1
 8001c16:	4303      	orrs	r3, r0
 8001c18:	9304      	str	r3, [sp, #16]
 8001c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c1e:	2206      	movs	r2, #6
 8001c20:	4826      	ldr	r0, [pc, #152]	; (8001cbc <_svfiprintf_r+0x1f4>)
 8001c22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c26:	f000 f9e5 	bl	8001ff4 <memchr>
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d038      	beq.n	8001ca0 <_svfiprintf_r+0x1d8>
 8001c2e:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <_svfiprintf_r+0x1f8>)
 8001c30:	bb1b      	cbnz	r3, 8001c7a <_svfiprintf_r+0x1b2>
 8001c32:	9b03      	ldr	r3, [sp, #12]
 8001c34:	3307      	adds	r3, #7
 8001c36:	f023 0307 	bic.w	r3, r3, #7
 8001c3a:	3308      	adds	r3, #8
 8001c3c:	9303      	str	r3, [sp, #12]
 8001c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c40:	4433      	add	r3, r6
 8001c42:	9309      	str	r3, [sp, #36]	; 0x24
 8001c44:	e767      	b.n	8001b16 <_svfiprintf_r+0x4e>
 8001c46:	460c      	mov	r4, r1
 8001c48:	2001      	movs	r0, #1
 8001c4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c4e:	e7a5      	b.n	8001b9c <_svfiprintf_r+0xd4>
 8001c50:	2300      	movs	r3, #0
 8001c52:	f04f 0c0a 	mov.w	ip, #10
 8001c56:	4619      	mov	r1, r3
 8001c58:	3401      	adds	r4, #1
 8001c5a:	9305      	str	r3, [sp, #20]
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c62:	3a30      	subs	r2, #48	; 0x30
 8001c64:	2a09      	cmp	r2, #9
 8001c66:	d903      	bls.n	8001c70 <_svfiprintf_r+0x1a8>
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0c5      	beq.n	8001bf8 <_svfiprintf_r+0x130>
 8001c6c:	9105      	str	r1, [sp, #20]
 8001c6e:	e7c3      	b.n	8001bf8 <_svfiprintf_r+0x130>
 8001c70:	4604      	mov	r4, r0
 8001c72:	2301      	movs	r3, #1
 8001c74:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c78:	e7f0      	b.n	8001c5c <_svfiprintf_r+0x194>
 8001c7a:	ab03      	add	r3, sp, #12
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	462a      	mov	r2, r5
 8001c80:	4638      	mov	r0, r7
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <_svfiprintf_r+0x1fc>)
 8001c84:	a904      	add	r1, sp, #16
 8001c86:	f3af 8000 	nop.w
 8001c8a:	1c42      	adds	r2, r0, #1
 8001c8c:	4606      	mov	r6, r0
 8001c8e:	d1d6      	bne.n	8001c3e <_svfiprintf_r+0x176>
 8001c90:	89ab      	ldrh	r3, [r5, #12]
 8001c92:	065b      	lsls	r3, r3, #25
 8001c94:	f53f af2c 	bmi.w	8001af0 <_svfiprintf_r+0x28>
 8001c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c9a:	b01d      	add	sp, #116	; 0x74
 8001c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ca0:	ab03      	add	r3, sp, #12
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	462a      	mov	r2, r5
 8001ca6:	4638      	mov	r0, r7
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <_svfiprintf_r+0x1fc>)
 8001caa:	a904      	add	r1, sp, #16
 8001cac:	f000 f87c 	bl	8001da8 <_printf_i>
 8001cb0:	e7eb      	b.n	8001c8a <_svfiprintf_r+0x1c2>
 8001cb2:	bf00      	nop
 8001cb4:	08002320 	.word	0x08002320
 8001cb8:	08002326 	.word	0x08002326
 8001cbc:	0800232a 	.word	0x0800232a
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	08001a11 	.word	0x08001a11

08001cc8 <_printf_common>:
 8001cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ccc:	4616      	mov	r6, r2
 8001cce:	4699      	mov	r9, r3
 8001cd0:	688a      	ldr	r2, [r1, #8]
 8001cd2:	690b      	ldr	r3, [r1, #16]
 8001cd4:	4607      	mov	r7, r0
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	bfb8      	it	lt
 8001cda:	4613      	movlt	r3, r2
 8001cdc:	6033      	str	r3, [r6, #0]
 8001cde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ce8:	b10a      	cbz	r2, 8001cee <_printf_common+0x26>
 8001cea:	3301      	adds	r3, #1
 8001cec:	6033      	str	r3, [r6, #0]
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	0699      	lsls	r1, r3, #26
 8001cf2:	bf42      	ittt	mi
 8001cf4:	6833      	ldrmi	r3, [r6, #0]
 8001cf6:	3302      	addmi	r3, #2
 8001cf8:	6033      	strmi	r3, [r6, #0]
 8001cfa:	6825      	ldr	r5, [r4, #0]
 8001cfc:	f015 0506 	ands.w	r5, r5, #6
 8001d00:	d106      	bne.n	8001d10 <_printf_common+0x48>
 8001d02:	f104 0a19 	add.w	sl, r4, #25
 8001d06:	68e3      	ldr	r3, [r4, #12]
 8001d08:	6832      	ldr	r2, [r6, #0]
 8001d0a:	1a9b      	subs	r3, r3, r2
 8001d0c:	42ab      	cmp	r3, r5
 8001d0e:	dc28      	bgt.n	8001d62 <_printf_common+0x9a>
 8001d10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001d14:	1e13      	subs	r3, r2, #0
 8001d16:	6822      	ldr	r2, [r4, #0]
 8001d18:	bf18      	it	ne
 8001d1a:	2301      	movne	r3, #1
 8001d1c:	0692      	lsls	r2, r2, #26
 8001d1e:	d42d      	bmi.n	8001d7c <_printf_common+0xb4>
 8001d20:	4649      	mov	r1, r9
 8001d22:	4638      	mov	r0, r7
 8001d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d28:	47c0      	blx	r8
 8001d2a:	3001      	adds	r0, #1
 8001d2c:	d020      	beq.n	8001d70 <_printf_common+0xa8>
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	68e5      	ldr	r5, [r4, #12]
 8001d32:	f003 0306 	and.w	r3, r3, #6
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	bf18      	it	ne
 8001d3a:	2500      	movne	r5, #0
 8001d3c:	6832      	ldr	r2, [r6, #0]
 8001d3e:	f04f 0600 	mov.w	r6, #0
 8001d42:	68a3      	ldr	r3, [r4, #8]
 8001d44:	bf08      	it	eq
 8001d46:	1aad      	subeq	r5, r5, r2
 8001d48:	6922      	ldr	r2, [r4, #16]
 8001d4a:	bf08      	it	eq
 8001d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d50:	4293      	cmp	r3, r2
 8001d52:	bfc4      	itt	gt
 8001d54:	1a9b      	subgt	r3, r3, r2
 8001d56:	18ed      	addgt	r5, r5, r3
 8001d58:	341a      	adds	r4, #26
 8001d5a:	42b5      	cmp	r5, r6
 8001d5c:	d11a      	bne.n	8001d94 <_printf_common+0xcc>
 8001d5e:	2000      	movs	r0, #0
 8001d60:	e008      	b.n	8001d74 <_printf_common+0xac>
 8001d62:	2301      	movs	r3, #1
 8001d64:	4652      	mov	r2, sl
 8001d66:	4649      	mov	r1, r9
 8001d68:	4638      	mov	r0, r7
 8001d6a:	47c0      	blx	r8
 8001d6c:	3001      	adds	r0, #1
 8001d6e:	d103      	bne.n	8001d78 <_printf_common+0xb0>
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d78:	3501      	adds	r5, #1
 8001d7a:	e7c4      	b.n	8001d06 <_printf_common+0x3e>
 8001d7c:	2030      	movs	r0, #48	; 0x30
 8001d7e:	18e1      	adds	r1, r4, r3
 8001d80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d8a:	4422      	add	r2, r4
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d92:	e7c5      	b.n	8001d20 <_printf_common+0x58>
 8001d94:	2301      	movs	r3, #1
 8001d96:	4622      	mov	r2, r4
 8001d98:	4649      	mov	r1, r9
 8001d9a:	4638      	mov	r0, r7
 8001d9c:	47c0      	blx	r8
 8001d9e:	3001      	adds	r0, #1
 8001da0:	d0e6      	beq.n	8001d70 <_printf_common+0xa8>
 8001da2:	3601      	adds	r6, #1
 8001da4:	e7d9      	b.n	8001d5a <_printf_common+0x92>
	...

08001da8 <_printf_i>:
 8001da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001dac:	7e0f      	ldrb	r7, [r1, #24]
 8001dae:	4691      	mov	r9, r2
 8001db0:	2f78      	cmp	r7, #120	; 0x78
 8001db2:	4680      	mov	r8, r0
 8001db4:	460c      	mov	r4, r1
 8001db6:	469a      	mov	sl, r3
 8001db8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001dba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001dbe:	d807      	bhi.n	8001dd0 <_printf_i+0x28>
 8001dc0:	2f62      	cmp	r7, #98	; 0x62
 8001dc2:	d80a      	bhi.n	8001dda <_printf_i+0x32>
 8001dc4:	2f00      	cmp	r7, #0
 8001dc6:	f000 80d9 	beq.w	8001f7c <_printf_i+0x1d4>
 8001dca:	2f58      	cmp	r7, #88	; 0x58
 8001dcc:	f000 80a4 	beq.w	8001f18 <_printf_i+0x170>
 8001dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001dd8:	e03a      	b.n	8001e50 <_printf_i+0xa8>
 8001dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001dde:	2b15      	cmp	r3, #21
 8001de0:	d8f6      	bhi.n	8001dd0 <_printf_i+0x28>
 8001de2:	a101      	add	r1, pc, #4	; (adr r1, 8001de8 <_printf_i+0x40>)
 8001de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001de8:	08001e41 	.word	0x08001e41
 8001dec:	08001e55 	.word	0x08001e55
 8001df0:	08001dd1 	.word	0x08001dd1
 8001df4:	08001dd1 	.word	0x08001dd1
 8001df8:	08001dd1 	.word	0x08001dd1
 8001dfc:	08001dd1 	.word	0x08001dd1
 8001e00:	08001e55 	.word	0x08001e55
 8001e04:	08001dd1 	.word	0x08001dd1
 8001e08:	08001dd1 	.word	0x08001dd1
 8001e0c:	08001dd1 	.word	0x08001dd1
 8001e10:	08001dd1 	.word	0x08001dd1
 8001e14:	08001f63 	.word	0x08001f63
 8001e18:	08001e85 	.word	0x08001e85
 8001e1c:	08001f45 	.word	0x08001f45
 8001e20:	08001dd1 	.word	0x08001dd1
 8001e24:	08001dd1 	.word	0x08001dd1
 8001e28:	08001f85 	.word	0x08001f85
 8001e2c:	08001dd1 	.word	0x08001dd1
 8001e30:	08001e85 	.word	0x08001e85
 8001e34:	08001dd1 	.word	0x08001dd1
 8001e38:	08001dd1 	.word	0x08001dd1
 8001e3c:	08001f4d 	.word	0x08001f4d
 8001e40:	682b      	ldr	r3, [r5, #0]
 8001e42:	1d1a      	adds	r2, r3, #4
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	602a      	str	r2, [r5, #0]
 8001e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0a4      	b.n	8001f9e <_printf_i+0x1f6>
 8001e54:	6820      	ldr	r0, [r4, #0]
 8001e56:	6829      	ldr	r1, [r5, #0]
 8001e58:	0606      	lsls	r6, r0, #24
 8001e5a:	f101 0304 	add.w	r3, r1, #4
 8001e5e:	d50a      	bpl.n	8001e76 <_printf_i+0xce>
 8001e60:	680e      	ldr	r6, [r1, #0]
 8001e62:	602b      	str	r3, [r5, #0]
 8001e64:	2e00      	cmp	r6, #0
 8001e66:	da03      	bge.n	8001e70 <_printf_i+0xc8>
 8001e68:	232d      	movs	r3, #45	; 0x2d
 8001e6a:	4276      	negs	r6, r6
 8001e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e70:	230a      	movs	r3, #10
 8001e72:	485e      	ldr	r0, [pc, #376]	; (8001fec <_printf_i+0x244>)
 8001e74:	e019      	b.n	8001eaa <_printf_i+0x102>
 8001e76:	680e      	ldr	r6, [r1, #0]
 8001e78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e7c:	602b      	str	r3, [r5, #0]
 8001e7e:	bf18      	it	ne
 8001e80:	b236      	sxthne	r6, r6
 8001e82:	e7ef      	b.n	8001e64 <_printf_i+0xbc>
 8001e84:	682b      	ldr	r3, [r5, #0]
 8001e86:	6820      	ldr	r0, [r4, #0]
 8001e88:	1d19      	adds	r1, r3, #4
 8001e8a:	6029      	str	r1, [r5, #0]
 8001e8c:	0601      	lsls	r1, r0, #24
 8001e8e:	d501      	bpl.n	8001e94 <_printf_i+0xec>
 8001e90:	681e      	ldr	r6, [r3, #0]
 8001e92:	e002      	b.n	8001e9a <_printf_i+0xf2>
 8001e94:	0646      	lsls	r6, r0, #25
 8001e96:	d5fb      	bpl.n	8001e90 <_printf_i+0xe8>
 8001e98:	881e      	ldrh	r6, [r3, #0]
 8001e9a:	2f6f      	cmp	r7, #111	; 0x6f
 8001e9c:	bf0c      	ite	eq
 8001e9e:	2308      	moveq	r3, #8
 8001ea0:	230a      	movne	r3, #10
 8001ea2:	4852      	ldr	r0, [pc, #328]	; (8001fec <_printf_i+0x244>)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001eaa:	6865      	ldr	r5, [r4, #4]
 8001eac:	2d00      	cmp	r5, #0
 8001eae:	bfa8      	it	ge
 8001eb0:	6821      	ldrge	r1, [r4, #0]
 8001eb2:	60a5      	str	r5, [r4, #8]
 8001eb4:	bfa4      	itt	ge
 8001eb6:	f021 0104 	bicge.w	r1, r1, #4
 8001eba:	6021      	strge	r1, [r4, #0]
 8001ebc:	b90e      	cbnz	r6, 8001ec2 <_printf_i+0x11a>
 8001ebe:	2d00      	cmp	r5, #0
 8001ec0:	d04d      	beq.n	8001f5e <_printf_i+0x1b6>
 8001ec2:	4615      	mov	r5, r2
 8001ec4:	fbb6 f1f3 	udiv	r1, r6, r3
 8001ec8:	fb03 6711 	mls	r7, r3, r1, r6
 8001ecc:	5dc7      	ldrb	r7, [r0, r7]
 8001ece:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001ed2:	4637      	mov	r7, r6
 8001ed4:	42bb      	cmp	r3, r7
 8001ed6:	460e      	mov	r6, r1
 8001ed8:	d9f4      	bls.n	8001ec4 <_printf_i+0x11c>
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d10b      	bne.n	8001ef6 <_printf_i+0x14e>
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	07de      	lsls	r6, r3, #31
 8001ee2:	d508      	bpl.n	8001ef6 <_printf_i+0x14e>
 8001ee4:	6923      	ldr	r3, [r4, #16]
 8001ee6:	6861      	ldr	r1, [r4, #4]
 8001ee8:	4299      	cmp	r1, r3
 8001eea:	bfde      	ittt	le
 8001eec:	2330      	movle	r3, #48	; 0x30
 8001eee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ef2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ef6:	1b52      	subs	r2, r2, r5
 8001ef8:	6122      	str	r2, [r4, #16]
 8001efa:	464b      	mov	r3, r9
 8001efc:	4621      	mov	r1, r4
 8001efe:	4640      	mov	r0, r8
 8001f00:	f8cd a000 	str.w	sl, [sp]
 8001f04:	aa03      	add	r2, sp, #12
 8001f06:	f7ff fedf 	bl	8001cc8 <_printf_common>
 8001f0a:	3001      	adds	r0, #1
 8001f0c:	d14c      	bne.n	8001fa8 <_printf_i+0x200>
 8001f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f12:	b004      	add	sp, #16
 8001f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f18:	4834      	ldr	r0, [pc, #208]	; (8001fec <_printf_i+0x244>)
 8001f1a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001f1e:	6829      	ldr	r1, [r5, #0]
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	f851 6b04 	ldr.w	r6, [r1], #4
 8001f26:	6029      	str	r1, [r5, #0]
 8001f28:	061d      	lsls	r5, r3, #24
 8001f2a:	d514      	bpl.n	8001f56 <_printf_i+0x1ae>
 8001f2c:	07df      	lsls	r7, r3, #31
 8001f2e:	bf44      	itt	mi
 8001f30:	f043 0320 	orrmi.w	r3, r3, #32
 8001f34:	6023      	strmi	r3, [r4, #0]
 8001f36:	b91e      	cbnz	r6, 8001f40 <_printf_i+0x198>
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	f023 0320 	bic.w	r3, r3, #32
 8001f3e:	6023      	str	r3, [r4, #0]
 8001f40:	2310      	movs	r3, #16
 8001f42:	e7af      	b.n	8001ea4 <_printf_i+0xfc>
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	f043 0320 	orr.w	r3, r3, #32
 8001f4a:	6023      	str	r3, [r4, #0]
 8001f4c:	2378      	movs	r3, #120	; 0x78
 8001f4e:	4828      	ldr	r0, [pc, #160]	; (8001ff0 <_printf_i+0x248>)
 8001f50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f54:	e7e3      	b.n	8001f1e <_printf_i+0x176>
 8001f56:	0659      	lsls	r1, r3, #25
 8001f58:	bf48      	it	mi
 8001f5a:	b2b6      	uxthmi	r6, r6
 8001f5c:	e7e6      	b.n	8001f2c <_printf_i+0x184>
 8001f5e:	4615      	mov	r5, r2
 8001f60:	e7bb      	b.n	8001eda <_printf_i+0x132>
 8001f62:	682b      	ldr	r3, [r5, #0]
 8001f64:	6826      	ldr	r6, [r4, #0]
 8001f66:	1d18      	adds	r0, r3, #4
 8001f68:	6961      	ldr	r1, [r4, #20]
 8001f6a:	6028      	str	r0, [r5, #0]
 8001f6c:	0635      	lsls	r5, r6, #24
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	d501      	bpl.n	8001f76 <_printf_i+0x1ce>
 8001f72:	6019      	str	r1, [r3, #0]
 8001f74:	e002      	b.n	8001f7c <_printf_i+0x1d4>
 8001f76:	0670      	lsls	r0, r6, #25
 8001f78:	d5fb      	bpl.n	8001f72 <_printf_i+0x1ca>
 8001f7a:	8019      	strh	r1, [r3, #0]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	4615      	mov	r5, r2
 8001f80:	6123      	str	r3, [r4, #16]
 8001f82:	e7ba      	b.n	8001efa <_printf_i+0x152>
 8001f84:	682b      	ldr	r3, [r5, #0]
 8001f86:	2100      	movs	r1, #0
 8001f88:	1d1a      	adds	r2, r3, #4
 8001f8a:	602a      	str	r2, [r5, #0]
 8001f8c:	681d      	ldr	r5, [r3, #0]
 8001f8e:	6862      	ldr	r2, [r4, #4]
 8001f90:	4628      	mov	r0, r5
 8001f92:	f000 f82f 	bl	8001ff4 <memchr>
 8001f96:	b108      	cbz	r0, 8001f9c <_printf_i+0x1f4>
 8001f98:	1b40      	subs	r0, r0, r5
 8001f9a:	6060      	str	r0, [r4, #4]
 8001f9c:	6863      	ldr	r3, [r4, #4]
 8001f9e:	6123      	str	r3, [r4, #16]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fa6:	e7a8      	b.n	8001efa <_printf_i+0x152>
 8001fa8:	462a      	mov	r2, r5
 8001faa:	4649      	mov	r1, r9
 8001fac:	4640      	mov	r0, r8
 8001fae:	6923      	ldr	r3, [r4, #16]
 8001fb0:	47d0      	blx	sl
 8001fb2:	3001      	adds	r0, #1
 8001fb4:	d0ab      	beq.n	8001f0e <_printf_i+0x166>
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	079b      	lsls	r3, r3, #30
 8001fba:	d413      	bmi.n	8001fe4 <_printf_i+0x23c>
 8001fbc:	68e0      	ldr	r0, [r4, #12]
 8001fbe:	9b03      	ldr	r3, [sp, #12]
 8001fc0:	4298      	cmp	r0, r3
 8001fc2:	bfb8      	it	lt
 8001fc4:	4618      	movlt	r0, r3
 8001fc6:	e7a4      	b.n	8001f12 <_printf_i+0x16a>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	4632      	mov	r2, r6
 8001fcc:	4649      	mov	r1, r9
 8001fce:	4640      	mov	r0, r8
 8001fd0:	47d0      	blx	sl
 8001fd2:	3001      	adds	r0, #1
 8001fd4:	d09b      	beq.n	8001f0e <_printf_i+0x166>
 8001fd6:	3501      	adds	r5, #1
 8001fd8:	68e3      	ldr	r3, [r4, #12]
 8001fda:	9903      	ldr	r1, [sp, #12]
 8001fdc:	1a5b      	subs	r3, r3, r1
 8001fde:	42ab      	cmp	r3, r5
 8001fe0:	dcf2      	bgt.n	8001fc8 <_printf_i+0x220>
 8001fe2:	e7eb      	b.n	8001fbc <_printf_i+0x214>
 8001fe4:	2500      	movs	r5, #0
 8001fe6:	f104 0619 	add.w	r6, r4, #25
 8001fea:	e7f5      	b.n	8001fd8 <_printf_i+0x230>
 8001fec:	08002331 	.word	0x08002331
 8001ff0:	08002342 	.word	0x08002342

08001ff4 <memchr>:
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	b510      	push	{r4, lr}
 8001ff8:	b2c9      	uxtb	r1, r1
 8001ffa:	4402      	add	r2, r0
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	d101      	bne.n	8002006 <memchr+0x12>
 8002002:	2000      	movs	r0, #0
 8002004:	e003      	b.n	800200e <memchr+0x1a>
 8002006:	7804      	ldrb	r4, [r0, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	428c      	cmp	r4, r1
 800200c:	d1f6      	bne.n	8001ffc <memchr+0x8>
 800200e:	bd10      	pop	{r4, pc}

08002010 <memcpy>:
 8002010:	440a      	add	r2, r1
 8002012:	4291      	cmp	r1, r2
 8002014:	f100 33ff 	add.w	r3, r0, #4294967295
 8002018:	d100      	bne.n	800201c <memcpy+0xc>
 800201a:	4770      	bx	lr
 800201c:	b510      	push	{r4, lr}
 800201e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002022:	4291      	cmp	r1, r2
 8002024:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002028:	d1f9      	bne.n	800201e <memcpy+0xe>
 800202a:	bd10      	pop	{r4, pc}

0800202c <memmove>:
 800202c:	4288      	cmp	r0, r1
 800202e:	b510      	push	{r4, lr}
 8002030:	eb01 0402 	add.w	r4, r1, r2
 8002034:	d902      	bls.n	800203c <memmove+0x10>
 8002036:	4284      	cmp	r4, r0
 8002038:	4623      	mov	r3, r4
 800203a:	d807      	bhi.n	800204c <memmove+0x20>
 800203c:	1e43      	subs	r3, r0, #1
 800203e:	42a1      	cmp	r1, r4
 8002040:	d008      	beq.n	8002054 <memmove+0x28>
 8002042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800204a:	e7f8      	b.n	800203e <memmove+0x12>
 800204c:	4601      	mov	r1, r0
 800204e:	4402      	add	r2, r0
 8002050:	428a      	cmp	r2, r1
 8002052:	d100      	bne.n	8002056 <memmove+0x2a>
 8002054:	bd10      	pop	{r4, pc}
 8002056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800205a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800205e:	e7f7      	b.n	8002050 <memmove+0x24>

08002060 <_free_r>:
 8002060:	b538      	push	{r3, r4, r5, lr}
 8002062:	4605      	mov	r5, r0
 8002064:	2900      	cmp	r1, #0
 8002066:	d040      	beq.n	80020ea <_free_r+0x8a>
 8002068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800206c:	1f0c      	subs	r4, r1, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	bfb8      	it	lt
 8002072:	18e4      	addlt	r4, r4, r3
 8002074:	f000 f910 	bl	8002298 <__malloc_lock>
 8002078:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <_free_r+0x8c>)
 800207a:	6813      	ldr	r3, [r2, #0]
 800207c:	b933      	cbnz	r3, 800208c <_free_r+0x2c>
 800207e:	6063      	str	r3, [r4, #4]
 8002080:	6014      	str	r4, [r2, #0]
 8002082:	4628      	mov	r0, r5
 8002084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002088:	f000 b90c 	b.w	80022a4 <__malloc_unlock>
 800208c:	42a3      	cmp	r3, r4
 800208e:	d908      	bls.n	80020a2 <_free_r+0x42>
 8002090:	6820      	ldr	r0, [r4, #0]
 8002092:	1821      	adds	r1, r4, r0
 8002094:	428b      	cmp	r3, r1
 8002096:	bf01      	itttt	eq
 8002098:	6819      	ldreq	r1, [r3, #0]
 800209a:	685b      	ldreq	r3, [r3, #4]
 800209c:	1809      	addeq	r1, r1, r0
 800209e:	6021      	streq	r1, [r4, #0]
 80020a0:	e7ed      	b.n	800207e <_free_r+0x1e>
 80020a2:	461a      	mov	r2, r3
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	b10b      	cbz	r3, 80020ac <_free_r+0x4c>
 80020a8:	42a3      	cmp	r3, r4
 80020aa:	d9fa      	bls.n	80020a2 <_free_r+0x42>
 80020ac:	6811      	ldr	r1, [r2, #0]
 80020ae:	1850      	adds	r0, r2, r1
 80020b0:	42a0      	cmp	r0, r4
 80020b2:	d10b      	bne.n	80020cc <_free_r+0x6c>
 80020b4:	6820      	ldr	r0, [r4, #0]
 80020b6:	4401      	add	r1, r0
 80020b8:	1850      	adds	r0, r2, r1
 80020ba:	4283      	cmp	r3, r0
 80020bc:	6011      	str	r1, [r2, #0]
 80020be:	d1e0      	bne.n	8002082 <_free_r+0x22>
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4401      	add	r1, r0
 80020c6:	6011      	str	r1, [r2, #0]
 80020c8:	6053      	str	r3, [r2, #4]
 80020ca:	e7da      	b.n	8002082 <_free_r+0x22>
 80020cc:	d902      	bls.n	80020d4 <_free_r+0x74>
 80020ce:	230c      	movs	r3, #12
 80020d0:	602b      	str	r3, [r5, #0]
 80020d2:	e7d6      	b.n	8002082 <_free_r+0x22>
 80020d4:	6820      	ldr	r0, [r4, #0]
 80020d6:	1821      	adds	r1, r4, r0
 80020d8:	428b      	cmp	r3, r1
 80020da:	bf01      	itttt	eq
 80020dc:	6819      	ldreq	r1, [r3, #0]
 80020de:	685b      	ldreq	r3, [r3, #4]
 80020e0:	1809      	addeq	r1, r1, r0
 80020e2:	6021      	streq	r1, [r4, #0]
 80020e4:	6063      	str	r3, [r4, #4]
 80020e6:	6054      	str	r4, [r2, #4]
 80020e8:	e7cb      	b.n	8002082 <_free_r+0x22>
 80020ea:	bd38      	pop	{r3, r4, r5, pc}
 80020ec:	2000009c 	.word	0x2000009c

080020f0 <sbrk_aligned>:
 80020f0:	b570      	push	{r4, r5, r6, lr}
 80020f2:	4e0e      	ldr	r6, [pc, #56]	; (800212c <sbrk_aligned+0x3c>)
 80020f4:	460c      	mov	r4, r1
 80020f6:	6831      	ldr	r1, [r6, #0]
 80020f8:	4605      	mov	r5, r0
 80020fa:	b911      	cbnz	r1, 8002102 <sbrk_aligned+0x12>
 80020fc:	f000 f8bc 	bl	8002278 <_sbrk_r>
 8002100:	6030      	str	r0, [r6, #0]
 8002102:	4621      	mov	r1, r4
 8002104:	4628      	mov	r0, r5
 8002106:	f000 f8b7 	bl	8002278 <_sbrk_r>
 800210a:	1c43      	adds	r3, r0, #1
 800210c:	d00a      	beq.n	8002124 <sbrk_aligned+0x34>
 800210e:	1cc4      	adds	r4, r0, #3
 8002110:	f024 0403 	bic.w	r4, r4, #3
 8002114:	42a0      	cmp	r0, r4
 8002116:	d007      	beq.n	8002128 <sbrk_aligned+0x38>
 8002118:	1a21      	subs	r1, r4, r0
 800211a:	4628      	mov	r0, r5
 800211c:	f000 f8ac 	bl	8002278 <_sbrk_r>
 8002120:	3001      	adds	r0, #1
 8002122:	d101      	bne.n	8002128 <sbrk_aligned+0x38>
 8002124:	f04f 34ff 	mov.w	r4, #4294967295
 8002128:	4620      	mov	r0, r4
 800212a:	bd70      	pop	{r4, r5, r6, pc}
 800212c:	200000a0 	.word	0x200000a0

08002130 <_malloc_r>:
 8002130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002134:	1ccd      	adds	r5, r1, #3
 8002136:	f025 0503 	bic.w	r5, r5, #3
 800213a:	3508      	adds	r5, #8
 800213c:	2d0c      	cmp	r5, #12
 800213e:	bf38      	it	cc
 8002140:	250c      	movcc	r5, #12
 8002142:	2d00      	cmp	r5, #0
 8002144:	4607      	mov	r7, r0
 8002146:	db01      	blt.n	800214c <_malloc_r+0x1c>
 8002148:	42a9      	cmp	r1, r5
 800214a:	d905      	bls.n	8002158 <_malloc_r+0x28>
 800214c:	230c      	movs	r3, #12
 800214e:	2600      	movs	r6, #0
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	4630      	mov	r0, r6
 8002154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002158:	4e2e      	ldr	r6, [pc, #184]	; (8002214 <_malloc_r+0xe4>)
 800215a:	f000 f89d 	bl	8002298 <__malloc_lock>
 800215e:	6833      	ldr	r3, [r6, #0]
 8002160:	461c      	mov	r4, r3
 8002162:	bb34      	cbnz	r4, 80021b2 <_malloc_r+0x82>
 8002164:	4629      	mov	r1, r5
 8002166:	4638      	mov	r0, r7
 8002168:	f7ff ffc2 	bl	80020f0 <sbrk_aligned>
 800216c:	1c43      	adds	r3, r0, #1
 800216e:	4604      	mov	r4, r0
 8002170:	d14d      	bne.n	800220e <_malloc_r+0xde>
 8002172:	6834      	ldr	r4, [r6, #0]
 8002174:	4626      	mov	r6, r4
 8002176:	2e00      	cmp	r6, #0
 8002178:	d140      	bne.n	80021fc <_malloc_r+0xcc>
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	4631      	mov	r1, r6
 800217e:	4638      	mov	r0, r7
 8002180:	eb04 0803 	add.w	r8, r4, r3
 8002184:	f000 f878 	bl	8002278 <_sbrk_r>
 8002188:	4580      	cmp	r8, r0
 800218a:	d13a      	bne.n	8002202 <_malloc_r+0xd2>
 800218c:	6821      	ldr	r1, [r4, #0]
 800218e:	3503      	adds	r5, #3
 8002190:	1a6d      	subs	r5, r5, r1
 8002192:	f025 0503 	bic.w	r5, r5, #3
 8002196:	3508      	adds	r5, #8
 8002198:	2d0c      	cmp	r5, #12
 800219a:	bf38      	it	cc
 800219c:	250c      	movcc	r5, #12
 800219e:	4638      	mov	r0, r7
 80021a0:	4629      	mov	r1, r5
 80021a2:	f7ff ffa5 	bl	80020f0 <sbrk_aligned>
 80021a6:	3001      	adds	r0, #1
 80021a8:	d02b      	beq.n	8002202 <_malloc_r+0xd2>
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	442b      	add	r3, r5
 80021ae:	6023      	str	r3, [r4, #0]
 80021b0:	e00e      	b.n	80021d0 <_malloc_r+0xa0>
 80021b2:	6822      	ldr	r2, [r4, #0]
 80021b4:	1b52      	subs	r2, r2, r5
 80021b6:	d41e      	bmi.n	80021f6 <_malloc_r+0xc6>
 80021b8:	2a0b      	cmp	r2, #11
 80021ba:	d916      	bls.n	80021ea <_malloc_r+0xba>
 80021bc:	1961      	adds	r1, r4, r5
 80021be:	42a3      	cmp	r3, r4
 80021c0:	6025      	str	r5, [r4, #0]
 80021c2:	bf18      	it	ne
 80021c4:	6059      	strne	r1, [r3, #4]
 80021c6:	6863      	ldr	r3, [r4, #4]
 80021c8:	bf08      	it	eq
 80021ca:	6031      	streq	r1, [r6, #0]
 80021cc:	5162      	str	r2, [r4, r5]
 80021ce:	604b      	str	r3, [r1, #4]
 80021d0:	4638      	mov	r0, r7
 80021d2:	f104 060b 	add.w	r6, r4, #11
 80021d6:	f000 f865 	bl	80022a4 <__malloc_unlock>
 80021da:	f026 0607 	bic.w	r6, r6, #7
 80021de:	1d23      	adds	r3, r4, #4
 80021e0:	1af2      	subs	r2, r6, r3
 80021e2:	d0b6      	beq.n	8002152 <_malloc_r+0x22>
 80021e4:	1b9b      	subs	r3, r3, r6
 80021e6:	50a3      	str	r3, [r4, r2]
 80021e8:	e7b3      	b.n	8002152 <_malloc_r+0x22>
 80021ea:	6862      	ldr	r2, [r4, #4]
 80021ec:	42a3      	cmp	r3, r4
 80021ee:	bf0c      	ite	eq
 80021f0:	6032      	streq	r2, [r6, #0]
 80021f2:	605a      	strne	r2, [r3, #4]
 80021f4:	e7ec      	b.n	80021d0 <_malloc_r+0xa0>
 80021f6:	4623      	mov	r3, r4
 80021f8:	6864      	ldr	r4, [r4, #4]
 80021fa:	e7b2      	b.n	8002162 <_malloc_r+0x32>
 80021fc:	4634      	mov	r4, r6
 80021fe:	6876      	ldr	r6, [r6, #4]
 8002200:	e7b9      	b.n	8002176 <_malloc_r+0x46>
 8002202:	230c      	movs	r3, #12
 8002204:	4638      	mov	r0, r7
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	f000 f84c 	bl	80022a4 <__malloc_unlock>
 800220c:	e7a1      	b.n	8002152 <_malloc_r+0x22>
 800220e:	6025      	str	r5, [r4, #0]
 8002210:	e7de      	b.n	80021d0 <_malloc_r+0xa0>
 8002212:	bf00      	nop
 8002214:	2000009c 	.word	0x2000009c

08002218 <_realloc_r>:
 8002218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800221c:	4680      	mov	r8, r0
 800221e:	4614      	mov	r4, r2
 8002220:	460e      	mov	r6, r1
 8002222:	b921      	cbnz	r1, 800222e <_realloc_r+0x16>
 8002224:	4611      	mov	r1, r2
 8002226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800222a:	f7ff bf81 	b.w	8002130 <_malloc_r>
 800222e:	b92a      	cbnz	r2, 800223c <_realloc_r+0x24>
 8002230:	f7ff ff16 	bl	8002060 <_free_r>
 8002234:	4625      	mov	r5, r4
 8002236:	4628      	mov	r0, r5
 8002238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800223c:	f000 f838 	bl	80022b0 <_malloc_usable_size_r>
 8002240:	4284      	cmp	r4, r0
 8002242:	4607      	mov	r7, r0
 8002244:	d802      	bhi.n	800224c <_realloc_r+0x34>
 8002246:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800224a:	d812      	bhi.n	8002272 <_realloc_r+0x5a>
 800224c:	4621      	mov	r1, r4
 800224e:	4640      	mov	r0, r8
 8002250:	f7ff ff6e 	bl	8002130 <_malloc_r>
 8002254:	4605      	mov	r5, r0
 8002256:	2800      	cmp	r0, #0
 8002258:	d0ed      	beq.n	8002236 <_realloc_r+0x1e>
 800225a:	42bc      	cmp	r4, r7
 800225c:	4622      	mov	r2, r4
 800225e:	4631      	mov	r1, r6
 8002260:	bf28      	it	cs
 8002262:	463a      	movcs	r2, r7
 8002264:	f7ff fed4 	bl	8002010 <memcpy>
 8002268:	4631      	mov	r1, r6
 800226a:	4640      	mov	r0, r8
 800226c:	f7ff fef8 	bl	8002060 <_free_r>
 8002270:	e7e1      	b.n	8002236 <_realloc_r+0x1e>
 8002272:	4635      	mov	r5, r6
 8002274:	e7df      	b.n	8002236 <_realloc_r+0x1e>
	...

08002278 <_sbrk_r>:
 8002278:	b538      	push	{r3, r4, r5, lr}
 800227a:	2300      	movs	r3, #0
 800227c:	4d05      	ldr	r5, [pc, #20]	; (8002294 <_sbrk_r+0x1c>)
 800227e:	4604      	mov	r4, r0
 8002280:	4608      	mov	r0, r1
 8002282:	602b      	str	r3, [r5, #0]
 8002284:	f7fe fc08 	bl	8000a98 <_sbrk>
 8002288:	1c43      	adds	r3, r0, #1
 800228a:	d102      	bne.n	8002292 <_sbrk_r+0x1a>
 800228c:	682b      	ldr	r3, [r5, #0]
 800228e:	b103      	cbz	r3, 8002292 <_sbrk_r+0x1a>
 8002290:	6023      	str	r3, [r4, #0]
 8002292:	bd38      	pop	{r3, r4, r5, pc}
 8002294:	200000a4 	.word	0x200000a4

08002298 <__malloc_lock>:
 8002298:	4801      	ldr	r0, [pc, #4]	; (80022a0 <__malloc_lock+0x8>)
 800229a:	f000 b811 	b.w	80022c0 <__retarget_lock_acquire_recursive>
 800229e:	bf00      	nop
 80022a0:	200000a8 	.word	0x200000a8

080022a4 <__malloc_unlock>:
 80022a4:	4801      	ldr	r0, [pc, #4]	; (80022ac <__malloc_unlock+0x8>)
 80022a6:	f000 b80c 	b.w	80022c2 <__retarget_lock_release_recursive>
 80022aa:	bf00      	nop
 80022ac:	200000a8 	.word	0x200000a8

080022b0 <_malloc_usable_size_r>:
 80022b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022b4:	1f18      	subs	r0, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	bfbc      	itt	lt
 80022ba:	580b      	ldrlt	r3, [r1, r0]
 80022bc:	18c0      	addlt	r0, r0, r3
 80022be:	4770      	bx	lr

080022c0 <__retarget_lock_acquire_recursive>:
 80022c0:	4770      	bx	lr

080022c2 <__retarget_lock_release_recursive>:
 80022c2:	4770      	bx	lr

080022c4 <_init>:
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c6:	bf00      	nop
 80022c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ca:	bc08      	pop	{r3}
 80022cc:	469e      	mov	lr, r3
 80022ce:	4770      	bx	lr

080022d0 <_fini>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	bf00      	nop
 80022d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d6:	bc08      	pop	{r3}
 80022d8:	469e      	mov	lr, r3
 80022da:	4770      	bx	lr
